
display2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000b0  08005738  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005738  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e5c  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208a  00000000  00000000  00030f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00032fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228ee  00000000  00000000  00034f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001327e  00000000  00000000  00057826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b59  00000000  00000000  0006aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e5fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  0013e650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001430c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005534 	.word	0x08005534

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08005534 	.word	0x08005534

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HD44780_Init>:
		0b01110,
		0b11011
};

void HD44780_Init(uint8_t rows)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005ce:	4a44      	ldr	r2, [pc, #272]	; (80006e0 <HD44780_Init+0x11c>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005d4:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <HD44780_Init+0x120>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <HD44780_Init+0x124>)
 80005dc:	2208      	movs	r2, #8
 80005de:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <HD44780_Init+0x11c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d907      	bls.n	80005f8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <HD44780_Init+0x124>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <HD44780_Init+0x124>)
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e006      	b.n	8000606 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <HD44780_Init+0x124>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <HD44780_Init+0x124>)
 8000604:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000606:	f000 f9b7 	bl	8000978 <DelayInit>
  HAL_Delay(50);
 800060a:	2032      	movs	r0, #50	; 0x32
 800060c:	f001 fb72 	bl	8001cf4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <HD44780_Init+0x120>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f975 	bl	8000904 <ExpanderWrite>
  HAL_Delay(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f001 fb69 	bl	8001cf4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000622:	2030      	movs	r0, #48	; 0x30
 8000624:	f000 f95c 	bl	80008e0 <Write4Bits>
  DelayUS(4500);
 8000628:	f241 1094 	movw	r0, #4500	; 0x1194
 800062c:	f000 f9ce 	bl	80009cc <DelayUS>

  Write4Bits(0x03 << 4);
 8000630:	2030      	movs	r0, #48	; 0x30
 8000632:	f000 f955 	bl	80008e0 <Write4Bits>
  DelayUS(4500);
 8000636:	f241 1094 	movw	r0, #4500	; 0x1194
 800063a:	f000 f9c7 	bl	80009cc <DelayUS>

  Write4Bits(0x03 << 4);
 800063e:	2030      	movs	r0, #48	; 0x30
 8000640:	f000 f94e 	bl	80008e0 <Write4Bits>
  DelayUS(4500);
 8000644:	f241 1094 	movw	r0, #4500	; 0x1194
 8000648:	f000 f9c0 	bl	80009cc <DelayUS>

  Write4Bits(0x02 << 4);
 800064c:	2020      	movs	r0, #32
 800064e:	f000 f947 	bl	80008e0 <Write4Bits>
  DelayUS(100);
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f000 f9ba 	bl	80009cc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <HD44780_Init+0x124>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f8ff 	bl	8000866 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HD44780_Init+0x128>)
 800066a:	2204      	movs	r2, #4
 800066c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800066e:	f000 f899 	bl	80007a4 <HD44780_Display>
  HD44780_Clear();
 8000672:	f000 f84f 	bl	8000714 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <HD44780_Init+0x12c>)
 8000678:	2202      	movs	r2, #2
 800067a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <HD44780_Init+0x12c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f8ed 	bl	8000866 <SendCommand>
  DelayUS(4500);
 800068c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000690:	f000 f99c 	bl	80009cc <DelayUS>

  HD44780_CreateSpecialChar(0, rside);
 8000694:	4917      	ldr	r1, [pc, #92]	; (80006f4 <HD44780_Init+0x130>)
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f89a 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, lside);
 800069c:	4916      	ldr	r1, [pc, #88]	; (80006f8 <HD44780_Init+0x134>)
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f896 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(2, arrowL2);
 80006a4:	4915      	ldr	r1, [pc, #84]	; (80006fc <HD44780_Init+0x138>)
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 f892 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(3, VPiece);
 80006ac:	4914      	ldr	r1, [pc, #80]	; (8000700 <HD44780_Init+0x13c>)
 80006ae:	2003      	movs	r0, #3
 80006b0:	f000 f88e 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(4, HPiece);
 80006b4:	4913      	ldr	r1, [pc, #76]	; (8000704 <HD44780_Init+0x140>)
 80006b6:	2004      	movs	r0, #4
 80006b8:	f000 f88a 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(5, full);
 80006bc:	4912      	ldr	r1, [pc, #72]	; (8000708 <HD44780_Init+0x144>)
 80006be:	2005      	movs	r0, #5
 80006c0:	f000 f886 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(6, mup);
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <HD44780_Init+0x148>)
 80006c6:	2006      	movs	r0, #6
 80006c8:	f000 f882 	bl	80007d0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(7, mdown);
 80006cc:	4910      	ldr	r1, [pc, #64]	; (8000710 <HD44780_Init+0x14c>)
 80006ce:	2007      	movs	r0, #7
 80006d0:	f000 f87e 	bl	80007d0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80006d4:	f000 f829 	bl	800072a <HD44780_Home>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000cf 	.word	0x200000cf
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	200000cc 	.word	0x200000cc
 80006ec:	200000cd 	.word	0x200000cd
 80006f0:	200000ce 	.word	0x200000ce
 80006f4:	20000030 	.word	0x20000030
 80006f8:	20000038 	.word	0x20000038
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000008 	.word	0x20000008
 8000704:	20000010 	.word	0x20000010
 8000708:	20000018 	.word	0x20000018
 800070c:	20000020 	.word	0x20000020
 8000710:	20000028 	.word	0x20000028

08000714 <HD44780_Clear>:

void HD44780_Clear()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 f8a4 	bl	8000866 <SendCommand>
  DelayUS(2000);
 800071e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000722:	f000 f953 	bl	80009cc <DelayUS>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}

0800072a <HD44780_Home>:

void HD44780_Home()
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800072e:	2002      	movs	r0, #2
 8000730:	f000 f899 	bl	8000866 <SendCommand>
  DelayUS(2000);
 8000734:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000738:	f000 f948 	bl	80009cc <DelayUS>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HD44780_SetCursor+0x5c>)
 8000752:	f107 0408 	add.w	r4, r7, #8
 8000756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HD44780_SetCursor+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	429a      	cmp	r2, r3
 8000764:	d303      	bcc.n	800076e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HD44780_SetCursor+0x60>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3318      	adds	r3, #24
 8000774:	443b      	add	r3, r7
 8000776:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4413      	add	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b25b      	sxtb	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f86a 	bl	8000866 <SendCommand>
}
 8000792:	bf00      	nop
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	bf00      	nop
 800079c:	0800554c 	.word	0x0800554c
 80007a0:	200000cf 	.word	0x200000cf

080007a4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HD44780_Display+0x28>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HD44780_Display+0x28>)
 80007b4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HD44780_Display+0x28>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f850 	bl	8000866 <SendCommand>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000cd 	.word	0x200000cd

080007d0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f837 	bl	8000866 <SendCommand>
  for (int i=0; i<8; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e009      	b.n	8000812 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f83b 	bl	8000882 <SendChar>
  for (int i=0; i<8; i++)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2b07      	cmp	r3, #7
 8000816:	ddf2      	ble.n	80007fe <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HD44780_PrintSpecialChar>:
            SendChar(charmap[i][j]);
        }
    }
}
void HD44780_PrintSpecialChar(uint8_t index)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f827 	bl	8000882 <SendChar>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000844:	e006      	b.n	8000854 <HD44780_PrintStr+0x18>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f817 	bl	8000882 <SendChar>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f4      	bne.n	8000846 <HD44780_PrintStr+0xa>
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f812 	bl	800089e <Send>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f804 	bl	800089e <Send>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	460a      	mov	r2, r1
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	4613      	mov	r3, r2
 80008ac:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f023 030f 	bic.w	r3, r3, #15
 80008b4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f80b 	bl	80008e0 <Write4Bits>
  Write4Bits((lownib)|mode);
 80008ca:	7bba      	ldrb	r2, [r7, #14]
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f804 	bl	80008e0 <Write4Bits>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f809 	bl	8000904 <ExpanderWrite>
  PulseEnable(value);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f821 	bl	800093c <PulseEnable>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <ExpanderWrite+0x30>)
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4313      	orrs	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800091a:	f107 020f 	add.w	r2, r7, #15
 800091e:	230a      	movs	r3, #10
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2301      	movs	r3, #1
 8000924:	214e      	movs	r1, #78	; 0x4e
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <ExpanderWrite+0x34>)
 8000928:	f001 fdf8 	bl	800251c <HAL_I2C_Master_Transmit>
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000d0 	.word	0x200000d0
 8000938:	200000d4 	.word	0x200000d4

0800093c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffd8 	bl	8000904 <ExpanderWrite>
  DelayUS(20);
 8000954:	2014      	movs	r0, #20
 8000956:	f000 f839 	bl	80009cc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f023 0304 	bic.w	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffce 	bl	8000904 <ExpanderWrite>
  DelayUS(20);
 8000968:	2014      	movs	r0, #20
 800096a:	f000 f82f 	bl	80009cc <DelayUS>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <DelayInit>:

static void DelayInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <DelayInit+0x4c>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <DelayInit+0x4c>)
 8000982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000986:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <DelayInit+0x4c>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <DelayInit+0x4c>)
 800098e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000992:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <DelayInit+0x50>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <DelayInit+0x50>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <DelayInit+0x50>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <DelayInit+0x50>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <DelayInit+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009b2:	bf00      	nop
  __ASM volatile ("NOP");
 80009b4:	bf00      	nop
  __ASM volatile ("NOP");
 80009b6:	bf00      	nop
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000edf0 	.word	0xe000edf0
 80009c8:	e0001000 	.word	0xe0001000

080009cc <DelayUS>:

static void DelayUS(uint32_t us) {
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <DelayUS+0x44>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <DelayUS+0x48>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	0c9a      	lsrs	r2, r3, #18
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <DelayUS+0x4c>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <DelayUS+0x4c>)
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f6      	bhi.n	80009ee <DelayUS+0x22>
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000040 	.word	0x20000040
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	e0001000 	.word	0xe0001000

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[1024]={'0'};
 8000a24:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000a28:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000a2c:	2230      	movs	r2, #48	; 0x30
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	3304      	adds	r3, #4
 8000a32:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 f8d1 	bl	8004be0 <memset>

	GPIO_PinState GPIO_state1;
	GPIO_PinState GPIO_state2;
	GPIO_PinState GPIO_state3;
	bool isgoingveryleft = false;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	bool isgoingveryright = false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
//	GPIO_PinState GPIO_state;
	//GPIO_PinState GPIO_state2;

	 time_t now=time(NULL);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f004 f8f0 	bl	8004c30 <time>
 8000a50:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000a54:	e9c3 0100 	strd	r0, r1, [r3]
	 int j=0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f001 f8d7 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 fa63 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f000 fc17 	bl	8001298 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6a:	f000 fbeb 	bl	8001244 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a6e:	f000 facb 	bl	8001008 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a72:	f000 fb6f 	bl	8001154 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a76:	f000 faf5 	bl	8001064 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	48b3      	ldr	r0, [pc, #716]	; (8000d4c <main+0x330>)
 8000a7e:	f002 fee5 	bl	800384c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a82:	2100      	movs	r1, #0
 8000a84:	48b2      	ldr	r0, [pc, #712]	; (8000d50 <main+0x334>)
 8000a86:	f002 fee1 	bl	800384c <HAL_TIM_PWM_Start>
   TIM2->CCR3=300;
 8000a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
   TIM3->CCR1=300;
 8000a94:	4baf      	ldr	r3, [pc, #700]	; (8000d54 <main+0x338>)
 8000a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34



  HD44780_Init(4);
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f7ff fd91 	bl	80005c4 <HD44780_Init>
   HD44780_Clear();
 8000aa2:	f7ff fe37 	bl	8000714 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fe49 	bl	8000740 <HD44780_SetCursor>
   HD44780_PrintStr("HELLO");
 8000aae:	48aa      	ldr	r0, [pc, #680]	; (8000d58 <main+0x33c>)
 8000ab0:	f7ff fec4 	bl	800083c <HD44780_PrintStr>
   HD44780_SetCursor(10,1);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f7ff fe42 	bl	8000740 <HD44780_SetCursor>
   HD44780_PrintStr("WORLD");
 8000abc:	48a7      	ldr	r0, [pc, #668]	; (8000d5c <main+0x340>)
 8000abe:	f7ff febd 	bl	800083c <HD44780_PrintStr>
   HD44780_SetCursor(0,3);
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe3b 	bl	8000740 <HD44780_SetCursor>
   HD44780_PrintStr("____________________");
 8000aca:	48a5      	ldr	r0, [pc, #660]	; (8000d60 <main+0x344>)
 8000acc:	f7ff feb6 	bl	800083c <HD44780_PrintStr>
   HAL_Delay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f001 f90e 	bl	8001cf4 <HAL_Delay>
    /* USER CODE BEGIN 3 */

	 // srand((unsigned) time(&now));


	  j++;
 8000ad8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000adc:	3301      	adds	r3, #1
 8000ade:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	  GPIO_state1 =HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	489f      	ldr	r0, [pc, #636]	; (8000d64 <main+0x348>)
 8000ae6:	f001 fba3 	bl	8002230 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407

	  if(GPIO_state1 == GPIO_PIN_SET)
 8000af0:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d111      	bne.n	8000b1c <main+0x100>
	  {
		  sprintf((char *)buf, "%s\r\n", "ACCESO1");
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4a9b      	ldr	r2, [pc, #620]	; (8000d68 <main+0x34c>)
 8000afc:	499b      	ldr	r1, [pc, #620]	; (8000d6c <main+0x350>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 f876 	bl	8004bf0 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb82 	bl	8000210 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	1d39      	adds	r1, r7, #4
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	4896      	ldr	r0, [pc, #600]	; (8000d70 <main+0x354>)
 8000b18:	f003 fcc3 	bl	80044a2 <HAL_UART_Transmit>
	  }
	  if(GPIO_state1 == GPIO_PIN_RESET)
 8000b1c:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d111      	bne.n	8000b48 <main+0x12c>
	  {
		  sprintf((char *)buf, "%s\r\n", "SPENTO");
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4a93      	ldr	r2, [pc, #588]	; (8000d74 <main+0x358>)
 8000b28:	4990      	ldr	r1, [pc, #576]	; (8000d6c <main+0x350>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 f860 	bl	8004bf0 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fb6c 	bl	8000210 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	1d39      	adds	r1, r7, #4
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	488b      	ldr	r0, [pc, #556]	; (8000d70 <main+0x354>)
 8000b44:	f003 fcad 	bl	80044a2 <HAL_UART_Transmit>
	  }

	  GPIO_state2 =HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000b48:	2110      	movs	r1, #16
 8000b4a:	4886      	ldr	r0, [pc, #536]	; (8000d64 <main+0x348>)
 8000b4c:	f001 fb70 	bl	8002230 <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
	  if(GPIO_state2 == GPIO_PIN_SET)
 8000b56:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d111      	bne.n	8000b82 <main+0x166>
	 	  {
	 		  sprintf((char *)buf, "%s\r\n", "ACCESO2");
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4a85      	ldr	r2, [pc, #532]	; (8000d78 <main+0x35c>)
 8000b62:	4982      	ldr	r1, [pc, #520]	; (8000d6c <main+0x350>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 f843 	bl	8004bf0 <siprintf>
	 		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb4f 	bl	8000210 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	1d39      	adds	r1, r7, #4
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	487c      	ldr	r0, [pc, #496]	; (8000d70 <main+0x354>)
 8000b7e:	f003 fc90 	bl	80044a2 <HAL_UART_Transmit>
	 	  }
	 	  if(GPIO_state2 == GPIO_PIN_RESET)
 8000b82:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d111      	bne.n	8000bae <main+0x192>
	 	  {
	 		  sprintf((char *)buf, "%s\r\n", "SPENTO2");
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4a7b      	ldr	r2, [pc, #492]	; (8000d7c <main+0x360>)
 8000b8e:	4977      	ldr	r1, [pc, #476]	; (8000d6c <main+0x350>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 f82d 	bl	8004bf0 <siprintf>
	 		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb39 	bl	8000210 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	1d39      	adds	r1, r7, #4
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	4871      	ldr	r0, [pc, #452]	; (8000d70 <main+0x354>)
 8000baa:	f003 fc7a 	bl	80044a2 <HAL_UART_Transmit>
	 	  }

	  GPIO_state3=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4873      	ldr	r0, [pc, #460]	; (8000d80 <main+0x364>)
 8000bb2:	f001 fb3d 	bl	8002230 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405

	  if(GPIO_state3 == GPIO_PIN_SET)
 8000bbc:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d111      	bne.n	8000be8 <main+0x1cc>
	 		 	  {
	 		 		  sprintf((char *)buf, "%s\r\n", "ACCESO3");
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4a6f      	ldr	r2, [pc, #444]	; (8000d84 <main+0x368>)
 8000bc8:	4968      	ldr	r1, [pc, #416]	; (8000d6c <main+0x350>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f810 	bl	8004bf0 <siprintf>
	 		 		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fb1c 	bl	8000210 <strlen>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	1d39      	adds	r1, r7, #4
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	4863      	ldr	r0, [pc, #396]	; (8000d70 <main+0x354>)
 8000be4:	f003 fc5d 	bl	80044a2 <HAL_UART_Transmit>
	 		 	  }
	 		 	  if(GPIO_state3 == GPIO_PIN_RESET)
 8000be8:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d111      	bne.n	8000c14 <main+0x1f8>
	 		 	  {
	 		 		  sprintf((char *)buf, "%s\r\n", "SPENTO3");
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4a65      	ldr	r2, [pc, #404]	; (8000d88 <main+0x36c>)
 8000bf4:	495d      	ldr	r1, [pc, #372]	; (8000d6c <main+0x350>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fffa 	bl	8004bf0 <siprintf>
	 		 		  HAL_UART_Transmit(&huart2, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fb06 	bl	8000210 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	1d39      	adds	r1, r7, #4
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	4858      	ldr	r0, [pc, #352]	; (8000d70 <main+0x354>)
 8000c10:	f003 fc47 	bl	80044a2 <HAL_UART_Transmit>



	 	/////////	 	////////////////////////////////////////////////////////////////////////////

	  if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_RESET){
 8000c14:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d12c      	bne.n	8000c76 <main+0x25a>
 8000c1c:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d128      	bne.n	8000c76 <main+0x25a>
 8000c24:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d124      	bne.n	8000c76 <main+0x25a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);		//DESTRA
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4853      	ldr	r0, [pc, #332]	; (8000d80 <main+0x364>)
 8000c32:	f001 fb15 	bl	8002260 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  	//SINISTRA
 8000c36:	2200      	movs	r2, #0
 8000c38:	2120      	movs	r1, #32
 8000c3a:	4851      	ldr	r0, [pc, #324]	; (8000d80 <main+0x364>)
 8000c3c:	f001 fb10 	bl	8002260 <HAL_GPIO_WritePin>
		  TIM2->CCR3=450;
 8000c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c44:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000c48:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM3->CCR1=450;
 8000c4a:	4b42      	ldr	r3, [pc, #264]	; (8000d54 <main+0x338>)
 8000c4c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
		  stampaSArrow(j%4);
 8000c52:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000c56:	425a      	negs	r2, r3
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	f002 0203 	and.w	r2, r2, #3
 8000c60:	bf58      	it	pl
 8000c62:	4253      	negpl	r3, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fd4d 	bl	8001704 <stampaSArrow>
		  HAL_Delay(200);
 8000c6a:	20c8      	movs	r0, #200	; 0xc8
 8000c6c:	f001 f842 	bl	8001cf4 <HAL_Delay>
		  HD44780_Clear();
 8000c70:	f7ff fd50 	bl	8000714 <HD44780_Clear>
	  if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_RESET){
 8000c74:	e151      	b.n	8000f1a <main+0x4fe>

	  }
	  else if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_SET && GPIO_state3 == GPIO_PIN_RESET){
 8000c76:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d132      	bne.n	8000ce4 <main+0x2c8>
 8000c7e:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d12e      	bne.n	8000ce4 <main+0x2c8>
 8000c86:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d12a      	bne.n	8000ce4 <main+0x2c8>


			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);				// RUOTA DESTRA  NORMALE
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2108      	movs	r1, #8
 8000c92:	483b      	ldr	r0, [pc, #236]	; (8000d80 <main+0x364>)
 8000c94:	f001 fae4 	bl	8002260 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);				// CAMBIO VERSO RUOTA SINISTRA
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4838      	ldr	r0, [pc, #224]	; (8000d80 <main+0x364>)
 8000c9e:	f001 fadf 	bl	8002260 <HAL_GPIO_WritePin>
			  TIM3->CCR1 = 450;													//RUOTA DX
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <main+0x338>)
 8000ca4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR3 = 350;
 8000caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cae:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c

		  isgoingveryleft = false;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
		  isgoingveryright = false;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
		  stampalArrow(j%4);
 8000cc0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000cc4:	425a      	negs	r2, r3
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	f002 0203 	and.w	r2, r2, #3
 8000cce:	bf58      	it	pl
 8000cd0:	4253      	negpl	r3, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fc36 	bl	8001544 <stampalArrow>
		  HAL_Delay(200);
 8000cd8:	20c8      	movs	r0, #200	; 0xc8
 8000cda:	f001 f80b 	bl	8001cf4 <HAL_Delay>
		  HD44780_Clear();
 8000cde:	f7ff fd19 	bl	8000714 <HD44780_Clear>
	  else if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_SET && GPIO_state3 == GPIO_PIN_RESET){
 8000ce2:	e11a      	b.n	8000f1a <main+0x4fe>

	  }
	  else if(GPIO_state2 == GPIO_PIN_RESET && GPIO_state1 == GPIO_PIN_SET && GPIO_state3 == GPIO_PIN_RESET){
 8000ce4:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14f      	bne.n	8000d8c <main+0x370>
 8000cec:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d14b      	bne.n	8000d8c <main+0x370>
 8000cf4:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d147      	bne.n	8000d8c <main+0x370>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);				// RUOTA DESTRA  NORMALE
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2108      	movs	r1, #8
 8000d00:	481f      	ldr	r0, [pc, #124]	; (8000d80 <main+0x364>)
 8000d02:	f001 faad 	bl	8002260 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	            // RUOTA SINISTRA INDIETRO
 8000d06:	2201      	movs	r2, #1
 8000d08:	2120      	movs	r1, #32
 8000d0a:	481d      	ldr	r0, [pc, #116]	; (8000d80 <main+0x364>)
 8000d0c:	f001 faa8 	bl	8002260 <HAL_GPIO_WritePin>

			  TIM3->CCR1 = 500;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <main+0x338>)
 8000d12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR3 = 400;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c
			  stampalArrow(j%4);
 8000d22:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000d26:	425a      	negs	r2, r3
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	bf58      	it	pl
 8000d32:	4253      	negpl	r3, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fc05 	bl	8001544 <stampalArrow>
			  HAL_Delay(200);
 8000d3a:	20c8      	movs	r0, #200	; 0xc8
 8000d3c:	f000 ffda 	bl	8001cf4 <HAL_Delay>
			  HD44780_Clear();
 8000d40:	f7ff fce8 	bl	8000714 <HD44780_Clear>
		  isgoingveryleft = true;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	  else if(GPIO_state2 == GPIO_PIN_RESET && GPIO_state1 == GPIO_PIN_SET && GPIO_state3 == GPIO_PIN_RESET){
 8000d4a:	e0e6      	b.n	8000f1a <main+0x4fe>
 8000d4c:	20000128 	.word	0x20000128
 8000d50:	20000170 	.word	0x20000170
 8000d54:	40000400 	.word	0x40000400
 8000d58:	0800555c 	.word	0x0800555c
 8000d5c:	08005564 	.word	0x08005564
 8000d60:	0800556c 	.word	0x0800556c
 8000d64:	40020000 	.word	0x40020000
 8000d68:	08005584 	.word	0x08005584
 8000d6c:	0800558c 	.word	0x0800558c
 8000d70:	200001b8 	.word	0x200001b8
 8000d74:	08005594 	.word	0x08005594
 8000d78:	0800559c 	.word	0x0800559c
 8000d7c:	080055a4 	.word	0x080055a4
 8000d80:	40020400 	.word	0x40020400
 8000d84:	080055ac 	.word	0x080055ac
 8000d88:	080055b4 	.word	0x080055b4
	  }
	  else if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_SET){
 8000d8c:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d132      	bne.n	8000dfa <main+0x3de>
 8000d94:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12e      	bne.n	8000dfa <main+0x3de>
 8000d9c:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d12a      	bne.n	8000dfa <main+0x3de>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);				//CAMBIO VERSO RUOTA DESTRA
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	485e      	ldr	r0, [pc, #376]	; (8000f24 <main+0x508>)
 8000daa:	f001 fa59 	bl	8002260 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  			//SINISTRA NORMALE
 8000dae:	2200      	movs	r2, #0
 8000db0:	2120      	movs	r1, #32
 8000db2:	485c      	ldr	r0, [pc, #368]	; (8000f24 <main+0x508>)
 8000db4:	f001 fa54 	bl	8002260 <HAL_GPIO_WritePin>

			  TIM3->CCR1 = 350;
 8000db8:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <main+0x50c>)
 8000dba:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR3 = 450;
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000dc8:	63da      	str	r2, [r3, #60]	; 0x3c
			  stamparArrow(j%4);
 8000dca:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000dce:	425a      	negs	r2, r3
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	bf58      	it	pl
 8000dda:	4253      	negpl	r3, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fae3 	bl	80013a8 <stamparArrow>
			  HAL_Delay(200);
 8000de2:	20c8      	movs	r0, #200	; 0xc8
 8000de4:	f000 ff86 	bl	8001cf4 <HAL_Delay>
			  HD44780_Clear();
 8000de8:	f7ff fc94 	bl	8000714 <HD44780_Clear>
		  isgoingveryright = false;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
		  isgoingveryleft = false;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
	  else if(GPIO_state2 == GPIO_PIN_SET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_SET){
 8000df8:	e08f      	b.n	8000f1a <main+0x4fe>

	  }
	  else if (GPIO_state2 == GPIO_PIN_RESET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_SET){
 8000dfa:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d12f      	bne.n	8000e62 <main+0x446>
 8000e02:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d12b      	bne.n	8000e62 <main+0x446>
 8000e0a:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d127      	bne.n	8000e62 <main+0x446>


			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);				//RUOTA DESTRA
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4843      	ldr	r0, [pc, #268]	; (8000f24 <main+0x508>)
 8000e18:	f001 fa22 	bl	8002260 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  			//SINISTRA NORMALE
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4840      	ldr	r0, [pc, #256]	; (8000f24 <main+0x508>)
 8000e22:	f001 fa1d 	bl	8002260 <HAL_GPIO_WritePin>

			 TIM3->CCR1 = 400;
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <main+0x50c>)
 8000e28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
			 TIM2->CCR3 = 500;
 8000e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c
			 stamparArrow(j%4);
 8000e38:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000e3c:	425a      	negs	r2, r3
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	bf58      	it	pl
 8000e48:	4253      	negpl	r3, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 faac 	bl	80013a8 <stamparArrow>
			  HAL_Delay(200);
 8000e50:	20c8      	movs	r0, #200	; 0xc8
 8000e52:	f000 ff4f 	bl	8001cf4 <HAL_Delay>
			  HD44780_Clear();
 8000e56:	f7ff fc5d 	bl	8000714 <HD44780_Clear>
		  isgoingveryright = true;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
	  else if (GPIO_state2 == GPIO_PIN_RESET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_SET){
 8000e60:	e05b      	b.n	8000f1a <main+0x4fe>
	  }
	  else if(GPIO_state2 == GPIO_PIN_RESET && GPIO_state1 == GPIO_PIN_RESET && GPIO_state3 == GPIO_PIN_RESET){
 8000e62:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d157      	bne.n	8000f1a <main+0x4fe>
 8000e6a:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d153      	bne.n	8000f1a <main+0x4fe>
 8000e72:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d14f      	bne.n	8000f1a <main+0x4fe>
		  if(isgoingveryleft){
 8000e7a:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d023      	beq.n	8000eca <main+0x4ae>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);				// RUOTA DESTRA  NORMALE
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4827      	ldr	r0, [pc, #156]	; (8000f24 <main+0x508>)
 8000e88:	f001 f9ea 	bl	8002260 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	            // RUOTA SINISTRA INDIETRO
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2120      	movs	r1, #32
 8000e90:	4824      	ldr	r0, [pc, #144]	; (8000f24 <main+0x508>)
 8000e92:	f001 f9e5 	bl	8002260 <HAL_GPIO_WritePin>
			  TIM3->CCR1 = 600;
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <main+0x50c>)
 8000e98:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR3 = 400;
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
			  stampalArrow(j%4);
 8000ea8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000eac:	425a      	negs	r2, r3
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	bf58      	it	pl
 8000eb8:	4253      	negpl	r3, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fb42 	bl	8001544 <stampalArrow>
			  HAL_Delay(200);
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f000 ff17 	bl	8001cf4 <HAL_Delay>
			  HD44780_Clear();
 8000ec6:	f7ff fc25 	bl	8000714 <HD44780_Clear>

		  }
		  if(isgoingveryright){
 8000eca:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d023      	beq.n	8000f1a <main+0x4fe>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);				//RUOTA DESTRA
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <main+0x508>)
 8000ed8:	f001 f9c2 	bl	8002260 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  			//SINISTRA NORMALE
 8000edc:	2200      	movs	r2, #0
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4810      	ldr	r0, [pc, #64]	; (8000f24 <main+0x508>)
 8000ee2:	f001 f9bd 	bl	8002260 <HAL_GPIO_WritePin>
		  	 TIM3->CCR1 = 400;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0x50c>)
 8000ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
		  	 TIM2->CCR3 = 600;
 8000eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef2:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
		  	 stamparArrow(j%4);
 8000ef8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000efc:	425a      	negs	r2, r3
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	bf58      	it	pl
 8000f08:	4253      	negpl	r3, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fa4c 	bl	80013a8 <stamparArrow>
		  	 HAL_Delay(200);
 8000f10:	20c8      	movs	r0, #200	; 0xc8
 8000f12:	f000 feef 	bl	8001cf4 <HAL_Delay>
		  	HD44780_Clear();
 8000f16:	f7ff fbfd 	bl	8000714 <HD44780_Clear>

		   }
	  }
	  HAL_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 feea 	bl	8001cf4 <HAL_Delay>
	  j++;
 8000f20:	e5da      	b.n	8000ad8 <main+0xbc>
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40000400 	.word	0x40000400

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2234      	movs	r2, #52	; 0x34
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fe50 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <SystemClock_Config+0xd4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a29      	ldr	r2, [pc, #164]	; (8001000 <SystemClock_Config+0xd4>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <SystemClock_Config+0xd4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <SystemClock_Config+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <SystemClock_Config+0xd8>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <SystemClock_Config+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f900 	bl	80031c0 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fc6:	f000 fc35 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fda0 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ff2:	f000 fc1f 	bl	8001834 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	; 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f001 f925 	bl	8002294 <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001050:	f000 fbf0 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000d4 	.word	0x200000d4
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_TIM2_Init+0xec>)
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <MX_TIM2_Init+0xec>)
 800109e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80010a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <MX_TIM2_Init+0xec>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_TIM2_Init+0xec>)
 80010ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <MX_TIM2_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_TIM2_Init+0xec>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010be:	4824      	ldr	r0, [pc, #144]	; (8001150 <MX_TIM2_Init+0xec>)
 80010c0:	f002 fb1c 	bl	80036fc <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 fbb3 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d8:	4619      	mov	r1, r3
 80010da:	481d      	ldr	r0, [pc, #116]	; (8001150 <MX_TIM2_Init+0xec>)
 80010dc:	f002 fd40 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010e6:	f000 fba5 	bl	8001834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010ea:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_TIM2_Init+0xec>)
 80010ec:	f002 fb55 	bl	800379a <HAL_TIM_PWM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010f6:	f000 fb9d 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	4619      	mov	r1, r3
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_TIM2_Init+0xec>)
 800110a:	f003 f901 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001114:	f000 fb8e 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 800111c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2208      	movs	r2, #8
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM2_Init+0xec>)
 8001132:	f002 fc53 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800113c:	f000 fb7a 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM2_Init+0xec>)
 8001142:	f000 fc23 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001146:	bf00      	nop
 8001148:	3738      	adds	r7, #56	; 0x38
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000128 	.word	0x20000128

08001154 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	; 0x38
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_TIM3_Init+0xe8>)
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <MX_TIM3_Init+0xec>)
 8001188:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_TIM3_Init+0xe8>)
 800118c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001190:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_TIM3_Init+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <MX_TIM3_Init+0xe8>)
 800119a:	f242 3228 	movw	r2, #9000	; 0x2328
 800119e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_TIM3_Init+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <MX_TIM3_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ac:	4823      	ldr	r0, [pc, #140]	; (800123c <MX_TIM3_Init+0xe8>)
 80011ae:	f002 faa5 	bl	80036fc <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011b8:	f000 fb3c 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <MX_TIM3_Init+0xe8>)
 80011ca:	f002 fcc9 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011d4:	f000 fb2e 	bl	8001834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <MX_TIM3_Init+0xe8>)
 80011da:	f002 fade 	bl	800379a <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011e4:	f000 fb26 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_TIM3_Init+0xe8>)
 80011f8:	f003 f88a 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001202:	f000 fb17 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 800;
 800120a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_TIM3_Init+0xe8>)
 8001220:	f002 fbdc 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800122a:	f000 fb03 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_TIM3_Init+0xe8>)
 8001230:	f000 fbac 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001234:	bf00      	nop
 8001236:	3738      	adds	r7, #56	; 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000170 	.word	0x20000170
 8001240:	40000400 	.word	0x40000400

08001244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART2_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x4c>)
 800127c:	f003 f8c4 	bl	8004408 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 fad5 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001b8 	.word	0x200001b8
 8001294:	40004400 	.word	0x40004400

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <MX_GPIO_Init+0x100>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a38      	ldr	r2, [pc, #224]	; (8001398 <MX_GPIO_Init+0x100>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MX_GPIO_Init+0x100>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <MX_GPIO_Init+0x100>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <MX_GPIO_Init+0x100>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <MX_GPIO_Init+0x100>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_GPIO_Init+0x100>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <MX_GPIO_Init+0x100>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_GPIO_Init+0x100>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_GPIO_Init+0x100>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a23      	ldr	r2, [pc, #140]	; (8001398 <MX_GPIO_Init+0x100>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_GPIO_Init+0x100>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_GPIO_Init+0x104>)
 8001324:	f000 ff9c 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_GPIO_Init+0x108>)
 8001340:	f000 fde2 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001344:	2312      	movs	r3, #18
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <MX_GPIO_Init+0x104>)
 8001358:	f000 fdd6 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135c:	2320      	movs	r3, #32
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <MX_GPIO_Init+0x104>)
 8001374:	f000 fdc8 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_GPIO_Init+0x10c>)
 800138c:	f000 fdbc 	bl	8001f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020400 	.word	0x40020400

080013a8 <stamparArrow>:

	elem[22]=0;
	moob2[22]=0;

}
void stamparArrow(int j){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	  HD44780_SetCursor(15+j,1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	330f      	adds	r3, #15
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f9c0 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(7);
 80013c0:	2007      	movs	r0, #7
 80013c2:	f7ff fa2e 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(15+j,2);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	330f      	adds	r3, #15
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f9b5 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(6);
 80013d6:	2006      	movs	r0, #6
 80013d8:	f7ff fa23 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(14+j,1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	330e      	adds	r3, #14
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f9aa 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80013ec:	2005      	movs	r0, #5
 80013ee:	f7ff fa18 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(14+j,2);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	330e      	adds	r3, #14
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2102      	movs	r1, #2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f99f 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001402:	2005      	movs	r0, #5
 8001404:	f7ff fa0d 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(13+j,0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	330d      	adds	r3, #13
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f994 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(7);
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fa02 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(13+j,1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	330d      	adds	r3, #13
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2101      	movs	r1, #1
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f989 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f7ff f9f7 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(13+j,2);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	330d      	adds	r3, #13
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f97e 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001444:	2005      	movs	r0, #5
 8001446:	f7ff f9ec 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(13+j,3);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	330d      	adds	r3, #13
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2103      	movs	r1, #3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f973 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(6);
 800145a:	2006      	movs	r0, #6
 800145c:	f7ff f9e1 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(12+j,0);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	330c      	adds	r3, #12
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f968 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001470:	2005      	movs	r0, #5
 8001472:	f7ff f9d6 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(12+j,1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	330c      	adds	r3, #12
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f95d 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001486:	2005      	movs	r0, #5
 8001488:	f7ff f9cb 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(12+j,2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	330c      	adds	r3, #12
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2102      	movs	r1, #2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f952 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800149c:	2005      	movs	r0, #5
 800149e:	f7ff f9c0 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(12+j,3);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	330c      	adds	r3, #12
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2103      	movs	r1, #3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f947 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80014b2:	2005      	movs	r0, #5
 80014b4:	f7ff f9b5 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(11+j,1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	330b      	adds	r3, #11
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f93c 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80014c8:	2005      	movs	r0, #5
 80014ca:	f7ff f9aa 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(11+j,2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	330b      	adds	r3, #11
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2102      	movs	r1, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f931 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80014de:	2005      	movs	r0, #5
 80014e0:	f7ff f99f 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(10+j,1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	330a      	adds	r3, #10
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f926 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80014f4:	2005      	movs	r0, #5
 80014f6:	f7ff f994 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(10+j,2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	330a      	adds	r3, #10
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2102      	movs	r1, #2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f91b 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800150a:	2005      	movs	r0, #5
 800150c:	f7ff f989 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(9+j,1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3309      	adds	r3, #9
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f910 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001520:	2005      	movs	r0, #5
 8001522:	f7ff f97e 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(9+j,2);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3309      	adds	r3, #9
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2102      	movs	r1, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f905 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001536:	2005      	movs	r0, #5
 8001538:	f7ff f973 	bl	8000822 <HD44780_PrintSpecialChar>


}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <stampalArrow>:

void stampalArrow(int j){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

	  HD44780_SetCursor(4-j,1);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f1c3 0304 	rsb	r3, r3, #4
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2101      	movs	r1, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f8f1 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(7);
 800155e:	2007      	movs	r0, #7
 8001560:	f7ff f95f 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(4-j,2);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f1c3 0304 	rsb	r3, r3, #4
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f8e5 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(6);
 8001576:	2006      	movs	r0, #6
 8001578:	f7ff f953 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(5-j,1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f1c3 0305 	rsb	r3, r3, #5
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2101      	movs	r1, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f8d9 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800158e:	2005      	movs	r0, #5
 8001590:	f7ff f947 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(5-j,2);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f1c3 0305 	rsb	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2102      	movs	r1, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f8cd 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80015a6:	2005      	movs	r0, #5
 80015a8:	f7ff f93b 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(6-j,0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f1c3 0306 	rsb	r3, r3, #6
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f8c1 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(7);
 80015be:	2007      	movs	r0, #7
 80015c0:	f7ff f92f 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(6-j,1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f1c3 0306 	rsb	r3, r3, #6
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f8b5 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80015d6:	2005      	movs	r0, #5
 80015d8:	f7ff f923 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(6-j,2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f1c3 0306 	rsb	r3, r3, #6
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2102      	movs	r1, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff f8a9 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80015ee:	2005      	movs	r0, #5
 80015f0:	f7ff f917 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(6-j,3);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f1c3 0306 	rsb	r3, r3, #6
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2103      	movs	r1, #3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff f89d 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(6);
 8001606:	2006      	movs	r0, #6
 8001608:	f7ff f90b 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(7-j,0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f1c3 0307 	rsb	r3, r3, #7
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f891 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800161e:	2005      	movs	r0, #5
 8001620:	f7ff f8ff 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(7-j,1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f1c3 0307 	rsb	r3, r3, #7
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f885 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001636:	2005      	movs	r0, #5
 8001638:	f7ff f8f3 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(7-j,2);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f1c3 0307 	rsb	r3, r3, #7
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2102      	movs	r1, #2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f879 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800164e:	2005      	movs	r0, #5
 8001650:	f7ff f8e7 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(7-j,3);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f1c3 0307 	rsb	r3, r3, #7
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2103      	movs	r1, #3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f86d 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001666:	2005      	movs	r0, #5
 8001668:	f7ff f8db 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(8-j,1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 0308 	rsb	r3, r3, #8
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f861 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 800167e:	2005      	movs	r0, #5
 8001680:	f7ff f8cf 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(8-j,2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f1c3 0308 	rsb	r3, r3, #8
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f855 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 8001696:	2005      	movs	r0, #5
 8001698:	f7ff f8c3 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(9-j,1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f1c3 0309 	rsb	r3, r3, #9
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f849 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80016ae:	2005      	movs	r0, #5
 80016b0:	f7ff f8b7 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(9-j,2);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f1c3 0309 	rsb	r3, r3, #9
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f83d 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80016c6:	2005      	movs	r0, #5
 80016c8:	f7ff f8ab 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(10-j,1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f1c3 030a 	rsb	r3, r3, #10
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2101      	movs	r1, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f831 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80016de:	2005      	movs	r0, #5
 80016e0:	f7ff f89f 	bl	8000822 <HD44780_PrintSpecialChar>
	  HD44780_SetCursor(10-j,2);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f1c3 030a 	rsb	r3, r3, #10
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2102      	movs	r1, #2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f825 	bl	8000740 <HD44780_SetCursor>
	  HD44780_PrintSpecialChar(5);
 80016f6:	2005      	movs	r0, #5
 80016f8:	f7ff f893 	bl	8000822 <HD44780_PrintSpecialChar>


}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <stampaSArrow>:
	    	        	  HD44780_SetCursor(2,A+1);
	    	        	  HD44780_PrintSpecialChar(6);


}
void stampaSArrow(int j){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
						  HD44780_SetCursor(9,2-j);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f1c3 0302 	rsb	r3, r3, #2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	2009      	movs	r0, #9
 800171a:	f7ff f811 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(0);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff f87f 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(10,2-j);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f1c3 0302 	rsb	r3, r3, #2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4619      	mov	r1, r3
 8001730:	200a      	movs	r0, #10
 8001732:	f7ff f805 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff f873 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(9,3-j);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f1c3 0303 	rsb	r3, r3, #3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	2009      	movs	r0, #9
 800174a:	f7fe fff9 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 800174e:	2005      	movs	r0, #5
 8001750:	f7ff f867 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(10,3-j);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f1c3 0303 	rsb	r3, r3, #3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4619      	mov	r1, r3
 8001760:	200a      	movs	r0, #10
 8001762:	f7fe ffed 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 8001766:	2005      	movs	r0, #5
 8001768:	f7ff f85b 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(8,4-j);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f1c3 0304 	rsb	r3, r3, #4
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	2008      	movs	r0, #8
 800177a:	f7fe ffe1 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(0);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff f84f 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(9,4-j);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f1c3 0304 	rsb	r3, r3, #4
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	2009      	movs	r0, #9
 8001792:	f7fe ffd5 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 8001796:	2005      	movs	r0, #5
 8001798:	f7ff f843 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(10,4-j);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f1c3 0304 	rsb	r3, r3, #4
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	200a      	movs	r0, #10
 80017aa:	f7fe ffc9 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 80017ae:	2005      	movs	r0, #5
 80017b0:	f7ff f837 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(11,4-j);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f1c3 0304 	rsb	r3, r3, #4
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4619      	mov	r1, r3
 80017c0:	200b      	movs	r0, #11
 80017c2:	f7fe ffbd 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff f82b 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(8,5-j);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f1c3 0305 	rsb	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	2008      	movs	r0, #8
 80017da:	f7fe ffb1 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 80017de:	2005      	movs	r0, #5
 80017e0:	f7ff f81f 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(9,5-j);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f1c3 0305 	rsb	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	2009      	movs	r0, #9
 80017f2:	f7fe ffa5 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 80017f6:	2005      	movs	r0, #5
 80017f8:	f7ff f813 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(10,5-j);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f1c3 0305 	rsb	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4619      	mov	r1, r3
 8001808:	200a      	movs	r0, #10
 800180a:	f7fe ff99 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 800180e:	2005      	movs	r0, #5
 8001810:	f7ff f807 	bl	8000822 <HD44780_PrintSpecialChar>
	    	        	  HD44780_SetCursor(11,5-j);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f1c3 0305 	rsb	r3, r3, #5
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	200b      	movs	r0, #11
 8001822:	f7fe ff8d 	bl	8000740 <HD44780_SetCursor>
	    	        	  HD44780_PrintSpecialChar(5);
 8001826:	2005      	movs	r0, #5
 8001828:	f7fe fffb 	bl	8000822 <HD44780_PrintSpecialChar>

}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	e7fe      	b.n	800183c <Error_Handler+0x8>
	...

08001840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_MspInit+0x4c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_MspInit+0x4c>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187e:	2007      	movs	r0, #7
 8001880:	f000 fb0e 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_I2C_MspInit+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12c      	bne.n	800190c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_I2C_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_I2C_MspInit+0x88>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_I2C_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d4:	2312      	movs	r3, #18
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e0:	2304      	movs	r3, #4
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <HAL_I2C_MspInit+0x8c>)
 80018ec:	f000 fb0c 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_I2C_MspInit+0x88>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_I2C_MspInit+0x88>)
 80018fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_I2C_MspInit+0x88>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40005400 	.word	0x40005400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020400 	.word	0x40020400

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800194e:	e012      	b.n	8001976 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10d      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40000400 	.word	0x40000400

0800198c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ac:	d11f      	bne.n	80019ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4816      	ldr	r0, [pc, #88]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 80019e8:	f000 fa8e 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ec:	e022      	b.n	8001a34 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_TIM_MspPostInit+0xb8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d11d      	bne.n	8001a34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	6313      	str	r3, [r2, #48]	; 0x30
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_TIM_MspPostInit+0xb0>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a14:	2310      	movs	r3, #16
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a24:	2302      	movs	r3, #2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <HAL_TIM_MspPostInit+0xb4>)
 8001a30:	f000 fa6a 	bl	8001f08 <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40000400 	.word	0x40000400

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_UART_MspInit+0x84>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12b      	bne.n	8001ac2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_UART_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_UART_MspInit+0x8c>)
 8001abe:	f000 fa23 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40004400 	.word	0x40004400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f8c6 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {

	  errno = ENOMEM;
 8001b5c:	f003 f816 	bl	8004b8c <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20020000 	.word	0x20020000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	200001fc 	.word	0x200001fc
 8001b94:	20000218 	.word	0x20000218

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd8:	4c0b      	ldr	r4, [pc, #44]	; (8001c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be6:	f7ff ffd7 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f002 ffd5 	bl	8004b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bee:	f7fe ff15 	bl	8000a1c <main>
  bx  lr    
 8001bf2:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8001bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001c00:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8001c04:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001c08:	20000214 	.word	0x20000214

08001c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_Init+0x40>)
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_Init+0x40>)
 8001c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x40>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f931 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fdfc 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f93b 	bl	8001eee <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f911 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000040 	.word	0x20000040
 8001cac:	20000048 	.word	0x20000048
 8001cb0:	20000044 	.word	0x20000044

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000048 	.word	0x20000048
 8001cd8:	20000200 	.word	0x20000200

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000200 	.word	0x20000200

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000048 	.word	0x20000048

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff47 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e165      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8154 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d017      	beq.n	8001ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ae 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <HAL_GPIO_Init+0x300>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_Init+0x300>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_GPIO_Init+0x300>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_GPIO_Init+0x304>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_GPIO_Init+0x308>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <HAL_GPIO_Init+0x30c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4d      	ldr	r2, [pc, #308]	; (8002218 <HAL_GPIO_Init+0x310>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_GPIO_Init+0x314>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <HAL_GPIO_Init+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x20a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_GPIO_Init+0x31c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x206>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a49      	ldr	r2, [pc, #292]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x202>
 8002106:	2306      	movs	r3, #6
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210a:	2307      	movs	r3, #7
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4935      	ldr	r1, [pc, #212]	; (800220c <HAL_GPIO_Init+0x304>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b3a      	ldr	r3, [pc, #232]	; (800222c <HAL_GPIO_Init+0x324>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a31      	ldr	r2, [pc, #196]	; (800222c <HAL_GPIO_Init+0x324>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_GPIO_Init+0x324>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <HAL_GPIO_Init+0x324>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_GPIO_Init+0x324>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_GPIO_Init+0x324>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_GPIO_Init+0x324>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_GPIO_Init+0x324>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae96 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40013800 	.word	0x40013800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020400 	.word	0x40020400
 8002218:	40020800 	.word	0x40020800
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40021000 	.word	0x40021000
 8002224:	40021400 	.word	0x40021400
 8002228:	40021800 	.word	0x40021800
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e12b      	b.n	80024fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fae8 	bl	8001890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f8:	f000 fd0a 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80022fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4a81      	ldr	r2, [pc, #516]	; (8002508 <HAL_I2C_Init+0x274>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d807      	bhi.n	8002318 <HAL_I2C_Init+0x84>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a80      	ldr	r2, [pc, #512]	; (800250c <HAL_I2C_Init+0x278>)
 800230c:	4293      	cmp	r3, r2
 800230e:	bf94      	ite	ls
 8002310:	2301      	movls	r3, #1
 8002312:	2300      	movhi	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e006      	b.n	8002326 <HAL_I2C_Init+0x92>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a7d      	ldr	r2, [pc, #500]	; (8002510 <HAL_I2C_Init+0x27c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	bf94      	ite	ls
 8002320:	2301      	movls	r3, #1
 8002322:	2300      	movhi	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0e7      	b.n	80024fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a78      	ldr	r2, [pc, #480]	; (8002514 <HAL_I2C_Init+0x280>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0c9b      	lsrs	r3, r3, #18
 8002338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	430a      	orrs	r2, r1
 800234c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <HAL_I2C_Init+0x274>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d802      	bhi.n	8002368 <HAL_I2C_Init+0xd4>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3301      	adds	r3, #1
 8002366:	e009      	b.n	800237c <HAL_I2C_Init+0xe8>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	4a69      	ldr	r2, [pc, #420]	; (8002518 <HAL_I2C_Init+0x284>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	3301      	adds	r3, #1
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800238e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	495c      	ldr	r1, [pc, #368]	; (8002508 <HAL_I2C_Init+0x274>)
 8002398:	428b      	cmp	r3, r1
 800239a:	d819      	bhi.n	80023d0 <HAL_I2C_Init+0x13c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e59      	subs	r1, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023b0:	400b      	ands	r3, r1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_I2C_Init+0x138>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e59      	subs	r1, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ca:	e051      	b.n	8002470 <HAL_I2C_Init+0x1dc>
 80023cc:	2304      	movs	r3, #4
 80023ce:	e04f      	b.n	8002470 <HAL_I2C_Init+0x1dc>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d111      	bne.n	80023fc <HAL_I2C_Init+0x168>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e012      	b.n	8002422 <HAL_I2C_Init+0x18e>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Init+0x196>
 8002426:	2301      	movs	r3, #1
 8002428:	e022      	b.n	8002470 <HAL_I2C_Init+0x1dc>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10e      	bne.n	8002450 <HAL_I2C_Init+0x1bc>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1e58      	subs	r0, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	440b      	add	r3, r1
 8002440:	fbb0 f3f3 	udiv	r3, r0, r3
 8002444:	3301      	adds	r3, #1
 8002446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	e00f      	b.n	8002470 <HAL_I2C_Init+0x1dc>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	0099      	lsls	r1, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	6809      	ldr	r1, [r1, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800249e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6911      	ldr	r1, [r2, #16]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	000186a0 	.word	0x000186a0
 800250c:	001e847f 	.word	0x001e847f
 8002510:	003d08ff 	.word	0x003d08ff
 8002514:	431bde83 	.word	0x431bde83
 8002518:	10624dd3 	.word	0x10624dd3

0800251c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	461a      	mov	r2, r3
 8002528:	460b      	mov	r3, r1
 800252a:	817b      	strh	r3, [r7, #10]
 800252c:	4613      	mov	r3, r2
 800252e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff fbd4 	bl	8001cdc <HAL_GetTick>
 8002534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b20      	cmp	r3, #32
 8002540:	f040 80e0 	bne.w	8002704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2319      	movs	r3, #25
 800254a:	2201      	movs	r2, #1
 800254c:	4970      	ldr	r1, [pc, #448]	; (8002710 <HAL_I2C_Master_Transmit+0x1f4>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f964 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	e0d3      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_I2C_Master_Transmit+0x50>
 8002568:	2302      	movs	r3, #2
 800256a:	e0cc      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d007      	beq.n	8002592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2221      	movs	r2, #33	; 0x21
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2210      	movs	r2, #16
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	893a      	ldrh	r2, [r7, #8]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_I2C_Master_Transmit+0x1f8>)
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025d4:	8979      	ldrh	r1, [r7, #10]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f89c 	bl	8002718 <I2C_MasterRequestWrite>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e08d      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002600:	e066      	b.n	80026d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f9de 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b04      	cmp	r3, #4
 800266a:	d11b      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0x188>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d017      	beq.n	80026a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	6a39      	ldr	r1, [r7, #32]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f9ce 	bl	8002a4a <I2C_WaitOnBTFFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d107      	bne.n	80026cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e01a      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d194      	bne.n	8002602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00100002 	.word	0x00100002
 8002714:	ffff0000 	.word	0xffff0000

08002718 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d006      	beq.n	8002742 <I2C_MasterRequestWrite+0x2a>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d003      	beq.n	8002742 <I2C_MasterRequestWrite+0x2a>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e00b      	b.n	800276c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	2b12      	cmp	r3, #18
 800275a:	d107      	bne.n	800276c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f84f 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	d103      	bne.n	800279c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e035      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a8:	d108      	bne.n	80027bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e01b      	b.n	80027f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	11db      	asrs	r3, r3, #7
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0306 	and.w	r3, r3, #6
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f063 030f 	orn	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <I2C_MasterRequestWrite+0xfc>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f875 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e010      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ea:	897b      	ldrh	r3, [r7, #10]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <I2C_MasterRequestWrite+0x100>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f865 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010008 	.word	0x00010008
 8002818:	00010002 	.word	0x00010002

0800281c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282c:	e025      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d021      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff fa51 	bl	8001cdc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e023      	b.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4013      	ands	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	e00c      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d0b6      	beq.n	800282e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d8:	e051      	b.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d123      	bne.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e046      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d021      	beq.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7ff f9cf 	bl	8001cdc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e020      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10c      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e00b      	b.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d18d      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d4:	e02d      	b.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f878 	bl	8002acc <I2C_IsAcknowledgeFailed>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e02d      	b.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d021      	beq.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff f975 	bl	8001cdc <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d1ca      	bne.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a56:	e02d      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f837 	bl	8002acc <I2C_IsAcknowledgeFailed>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e02d      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d021      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a70:	f7ff f934 	bl	8001cdc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d302      	bcc.n	8002a86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e007      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d1ca      	bne.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d11b      	bne.n	8002b1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff f85e 	bl	8001cdc <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff f85a 	bl	8001cdc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f855 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe ffbe 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	080055cc 	.word	0x080055cc
 8002cf0:	20000040 	.word	0x20000040
 8002cf4:	20000044 	.word	0x20000044

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000040 	.word	0x20000040

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080055dc 	.word	0x080055dc

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	080055dc 	.word	0x080055dc

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b0ae      	sub	sp, #184	; 0xb8
 8002d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d86:	4bcb      	ldr	r3, [pc, #812]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	f200 8206 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x440>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	080031a1 	.word	0x080031a1
 8002da4:	080031a1 	.word	0x080031a1
 8002da8:	080031a1 	.word	0x080031a1
 8002dac:	08002dd9 	.word	0x08002dd9
 8002db0:	080031a1 	.word	0x080031a1
 8002db4:	080031a1 	.word	0x080031a1
 8002db8:	080031a1 	.word	0x080031a1
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	080031a1 	.word	0x080031a1
 8002dc4:	080031a1 	.word	0x080031a1
 8002dc8:	080031a1 	.word	0x080031a1
 8002dcc:	08002fd1 	.word	0x08002fd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4bb9      	ldr	r3, [pc, #740]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dd6:	e1e7      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4bb8      	ldr	r3, [pc, #736]	; (80030bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dde:	e1e3      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de0:	4bb4      	ldr	r3, [pc, #720]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dec:	4bb1      	ldr	r3, [pc, #708]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d071      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df8:	4bae      	ldr	r3, [pc, #696]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	0159      	lsls	r1, r3, #5
 8002e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e30:	0150      	lsls	r0, r2, #5
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4621      	mov	r1, r4
 8002e38:	1a51      	subs	r1, r2, r1
 8002e3a:	6439      	str	r1, [r7, #64]	; 0x40
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e50:	4649      	mov	r1, r9
 8002e52:	018b      	lsls	r3, r1, #6
 8002e54:	4641      	mov	r1, r8
 8002e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	018a      	lsls	r2, r1, #6
 8002e5e:	4641      	mov	r1, r8
 8002e60:	1a51      	subs	r1, r2, r1
 8002e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e64:	4649      	mov	r1, r9
 8002e66:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e78:	4649      	mov	r1, r9
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4641      	mov	r1, r8
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 8002e92:	462b      	mov	r3, r5
 8002e94:	460a      	mov	r2, r1
 8002e96:	eb42 0303 	adc.w	r3, r2, r3
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	024b      	lsls	r3, r1, #9
 8002eac:	4621      	mov	r1, r4
 8002eae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	024a      	lsls	r2, r1, #9
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ec8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ecc:	f7fd f9f8 	bl	80002c0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eda:	e067      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002edc:	4b75      	ldr	r3, [pc, #468]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002efa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4621      	mov	r1, r4
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f30:	4649      	mov	r1, r9
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4641      	mov	r1, r8
 8002f40:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f44:	4649      	mov	r1, r9
 8002f46:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f5e:	4692      	mov	sl, r2
 8002f60:	469b      	mov	fp, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb1a 0303 	adds.w	r3, sl, r3
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f7e:	4629      	mov	r1, r5
 8002f80:	028b      	lsls	r3, r1, #10
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f88:	4621      	mov	r1, r4
 8002f8a:	028a      	lsls	r2, r1, #10
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f94:	2200      	movs	r2, #0
 8002f96:	673b      	str	r3, [r7, #112]	; 0x70
 8002f98:	677a      	str	r2, [r7, #116]	; 0x74
 8002f9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f9e:	f7fd f98f 	bl	80002c0 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fac:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fce:	e0eb      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fdc:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d06b      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	2200      	movs	r2, #0
 8002ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8003000:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003004:	4622      	mov	r2, r4
 8003006:	462b      	mov	r3, r5
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	0159      	lsls	r1, r3, #5
 8003012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003016:	0150      	lsls	r0, r2, #5
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4621      	mov	r1, r4
 800301e:	1a51      	subs	r1, r2, r1
 8003020:	61b9      	str	r1, [r7, #24]
 8003022:	4629      	mov	r1, r5
 8003024:	eb63 0301 	sbc.w	r3, r3, r1
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003036:	4659      	mov	r1, fp
 8003038:	018b      	lsls	r3, r1, #6
 800303a:	4651      	mov	r1, sl
 800303c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003040:	4651      	mov	r1, sl
 8003042:	018a      	lsls	r2, r1, #6
 8003044:	4651      	mov	r1, sl
 8003046:	ebb2 0801 	subs.w	r8, r2, r1
 800304a:	4659      	mov	r1, fp
 800304c:	eb63 0901 	sbc.w	r9, r3, r1
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800305c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003060:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003064:	4690      	mov	r8, r2
 8003066:	4699      	mov	r9, r3
 8003068:	4623      	mov	r3, r4
 800306a:	eb18 0303 	adds.w	r3, r8, r3
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	462b      	mov	r3, r5
 8003072:	eb49 0303 	adc.w	r3, r9, r3
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003084:	4629      	mov	r1, r5
 8003086:	024b      	lsls	r3, r1, #9
 8003088:	4621      	mov	r1, r4
 800308a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800308e:	4621      	mov	r1, r4
 8003090:	024a      	lsls	r2, r1, #9
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309a:	2200      	movs	r2, #0
 800309c:	65bb      	str	r3, [r7, #88]	; 0x58
 800309e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030a4:	f7fd f90c 	bl	80002c0 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030b2:	e065      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x420>
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	2200      	movs	r2, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	4611      	mov	r1, r2
 80030cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030d0:	653b      	str	r3, [r7, #80]	; 0x50
 80030d2:	2300      	movs	r3, #0
 80030d4:	657b      	str	r3, [r7, #84]	; 0x54
 80030d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030da:	4642      	mov	r2, r8
 80030dc:	464b      	mov	r3, r9
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4641      	mov	r1, r8
 80030f4:	1a51      	subs	r1, r2, r1
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4649      	mov	r1, r9
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800310c:	4659      	mov	r1, fp
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003116:	4651      	mov	r1, sl
 8003118:	018a      	lsls	r2, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	1a54      	subs	r4, r2, r1
 800311e:	4659      	mov	r1, fp
 8003120:	eb63 0501 	sbc.w	r5, r3, r1
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	00eb      	lsls	r3, r5, #3
 800312e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003132:	00e2      	lsls	r2, r4, #3
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4643      	mov	r3, r8
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	464b      	mov	r3, r9
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003152:	4629      	mov	r1, r5
 8003154:	028b      	lsls	r3, r1, #10
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800315c:	4621      	mov	r1, r4
 800315e:	028a      	lsls	r2, r1, #10
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003168:	2200      	movs	r2, #0
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
 800316c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800316e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003172:	f7fd f8a5 	bl	80002c0 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4613      	mov	r3, r2
 800317c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	0f1b      	lsrs	r3, r3, #28
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800318e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800319e:	e003      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	37b8      	adds	r7, #184	; 0xb8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	00f42400 	.word	0x00f42400

080031c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e28d      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8083 	beq.w	80032e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e0:	4b94      	ldr	r3, [pc, #592]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d019      	beq.n	8003220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ec:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f8:	4b8e      	ldr	r3, [pc, #568]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d00c      	beq.n	8003220 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d112      	bne.n	8003238 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321e:	d10b      	bne.n	8003238 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x124>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d157      	bne.n	80032e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e25a      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d106      	bne.n	8003250 <HAL_RCC_OscConfig+0x90>
 8003242:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7b      	ldr	r2, [pc, #492]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <HAL_RCC_OscConfig+0xcc>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0xb4>
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a75      	ldr	r2, [pc, #468]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a72      	ldr	r2, [pc, #456]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0xcc>
 8003274:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fd22 	bl	8001cdc <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fd1e 	bl	8001cdc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e21f      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0xdc>
 80032ba:	e014      	b.n	80032e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fd0e 	bl	8001cdc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fd0a 	bl	8001cdc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e20b      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x104>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06f      	beq.n	80033d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032f2:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032fe:	4b4d      	ldr	r3, [pc, #308]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003306:	2b08      	cmp	r3, #8
 8003308:	d105      	bne.n	8003316 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d11c      	bne.n	800335c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d116      	bne.n	800335c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x186>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1d3      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4937      	ldr	r1, [pc, #220]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	e03a      	b.n	80033d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d020      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003364:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x278>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fcb7 	bl	8001cdc <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003372:	f7fe fcb3 	bl	8001cdc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e1b4      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4925      	ldr	r1, [pc, #148]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]
 80033a4:	e015      	b.n	80033d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_OscConfig+0x278>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc96 	bl	8001cdc <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b4:	f7fe fc92 	bl	8001cdc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e193      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d036      	beq.n	800344c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <HAL_RCC_OscConfig+0x27c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fe fc76 	bl	8001cdc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe fc72 	bl	8001cdc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e173      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 8003408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x234>
 8003412:	e01b      	b.n	800344c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <HAL_RCC_OscConfig+0x27c>)
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe fc5f 	bl	8001cdc <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	e00e      	b.n	8003440 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003422:	f7fe fc5b 	bl	8001cdc <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d907      	bls.n	8003440 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e15c      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
 8003434:	40023800 	.word	0x40023800
 8003438:	42470000 	.word	0x42470000
 800343c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	4b8a      	ldr	r3, [pc, #552]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ea      	bne.n	8003422 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8097 	beq.w	8003588 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345e:	4b83      	ldr	r3, [pc, #524]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a7e      	ldr	r2, [pc, #504]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b7c      	ldr	r3, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b79      	ldr	r3, [pc, #484]	; (8003670 <HAL_RCC_OscConfig+0x4b0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x4b0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	; (8003670 <HAL_RCC_OscConfig+0x4b0>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fc1b 	bl	8001cdc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe fc17 	bl	8001cdc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e118      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <HAL_RCC_OscConfig+0x4b0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x31e>
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	e01c      	b.n	8003518 <HAL_RCC_OscConfig+0x358>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x340>
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a60      	ldr	r2, [pc, #384]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	f043 0304 	orr.w	r3, r3, #4
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0x358>
 8003500:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a59      	ldr	r2, [pc, #356]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a56      	ldr	r2, [pc, #344]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	f023 0304 	bic.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe fbdc 	bl	8001cdc <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fe fbd8 	bl	8001cdc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0d7      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0ee      	beq.n	8003528 <HAL_RCC_OscConfig+0x368>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fe fbc6 	bl	8001cdc <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003552:	e00a      	b.n	800356a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe fbc2 	bl	8001cdc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0c1      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ee      	bne.n	8003554 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	4a3a      	ldr	r2, [pc, #232]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80ad 	beq.w	80036ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003592:	4b36      	ldr	r3, [pc, #216]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b08      	cmp	r3, #8
 800359c:	d060      	beq.n	8003660 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d145      	bne.n	8003632 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCC_OscConfig+0x4b4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fb96 	bl	8001cdc <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fb92 	bl	8001cdc <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e093      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	3b01      	subs	r3, #1
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	071b      	lsls	r3, r3, #28
 80035fe:	491b      	ldr	r1, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4b4>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe fb67 	bl	8001cdc <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fb63 	bl	8001cdc <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e064      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x452>
 8003630:	e05c      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x4b4>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fb50 	bl	8001cdc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe fb4c 	bl	8001cdc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e04d      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x4ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x480>
 800365e:	e045      	b.n	80036ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e040      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
 800366c:	40023800 	.word	0x40023800
 8003670:	40007000 	.word	0x40007000
 8003674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCC_OscConfig+0x538>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d030      	beq.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d129      	bne.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d122      	bne.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a8:	4013      	ands	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d119      	bne.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	3b01      	subs	r3, #1
 80036c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d10f      	bne.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe f8fc 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fad8 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e041      	b.n	8003830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f839 	bl	8003838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa89 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fce0 	bl	80042c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0xcc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Start+0xd0>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_TIM_PWM_Start+0xd2>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_TIM_PWM_Start+0x17c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIM_PWM_Start+0x180>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_TIM_PWM_Start+0x184>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_TIM_PWM_Start+0x188>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_PWM_Start+0x18c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40001800 	.word	0x40001800

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ae      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f200 809f 	bhi.w	8003b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b49 	.word	0x08003b49
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003b49 	.word	0x08003b49
 8003a38:	08003b49 	.word	0x08003b49
 8003a3c:	08003b49 	.word	0x08003b49
 8003a40:	08003b07 	.word	0x08003b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f9f0 	bl	8003e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e064      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fa40 	bl	8003f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e043      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa95 	bl	8003ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e023      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fae9 	bl	80040e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0b4      	b.n	8003ce6 <HAL_TIM_ConfigClockSource+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d03e      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	f200 8087 	bhi.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_TIM_ConfigClockSource+0x172>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d87f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d01a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xa6>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d87b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d050      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x11a>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d877      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xfa>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d873      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d058      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x13a>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d86f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d064      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d86b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d060      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d867      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05c      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d05a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	e062      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f000 fb35 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
      break;
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f000 fb1e 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c56:	609a      	str	r2, [r3, #8]
      break;
 8003c58:	e03c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fa92 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2150      	movs	r1, #80	; 0x50
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 faeb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003c78:	e02c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fab1 	bl	80041ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fadb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 fa72 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 facb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 fac2 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d027      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d023      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40010400 	.word	0x40010400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	40001800 	.word	0x40001800
 8003e28:	40001c00 	.word	0x40001c00
 8003e2c:	40002000 	.word	0x40002000

08003e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <TIM_OC1_SetConfig+0xd8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC1_SetConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <TIM_OC1_SetConfig+0xdc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10c      	bne.n	8003eae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0308 	bic.w	r3, r3, #8
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <TIM_OC1_SetConfig+0xd8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC1_SetConfig+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC1_SetConfig+0xdc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d111      	bne.n	8003ee2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0210 	bic.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <TIM_OC2_SetConfig+0xe4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC2_SetConfig+0x68>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <TIM_OC2_SetConfig+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10d      	bne.n	8003f94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <TIM_OC2_SetConfig+0xe4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x94>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <TIM_OC2_SetConfig+0xe8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d113      	bne.n	8003fcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_OC3_SetConfig+0xe0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC3_SetConfig+0x66>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_OC3_SetConfig+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10d      	bne.n	800407e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <TIM_OC3_SetConfig+0xe0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_OC3_SetConfig+0x92>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC3_SetConfig+0xe4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800412e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <TIM_OC4_SetConfig+0xa4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_OC4_SetConfig+0x68>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <TIM_OC4_SetConfig+0xa8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 030a 	bic.w	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0210 	bic.w	r2, r3, #16
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	f043 0307 	orr.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e05a      	b.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d01d      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10c      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800

08004408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e03f      	b.n	800449a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fb0a 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f929 	bl	80046a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b08a      	sub	sp, #40	; 0x28
 80044a6:	af02      	add	r7, sp, #8
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d17c      	bne.n	80045bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Transmit+0x2c>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e075      	b.n	80045be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit+0x3e>
 80044dc:	2302      	movs	r3, #2
 80044de:	e06e      	b.n	80045be <HAL_UART_Transmit+0x11c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fbf1 	bl	8001cdc <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004510:	d108      	bne.n	8004524 <HAL_UART_Transmit+0x82>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004534:	e02a      	b.n	800458c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2180      	movs	r1, #128	; 0x80
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f840 	bl	80045c6 <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e036      	b.n	80045be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3302      	adds	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e007      	b.n	800457e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	3301      	adds	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1cf      	bne.n	8004536 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f810 	bl	80045c6 <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e006      	b.n	80045be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b090      	sub	sp, #64	; 0x40
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	e050      	b.n	800467a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d04c      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045e6:	f7fd fb79 	bl	8001cdc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d241      	bcs.n	800467a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004616:	637a      	str	r2, [r7, #52]	; 0x34
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800461c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	613b      	str	r3, [r7, #16]
   return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464a:	623a      	str	r2, [r7, #32]
 800464c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	69f9      	ldr	r1, [r7, #28]
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	61bb      	str	r3, [r7, #24]
   return(result);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e00f      	b.n	800469a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	429a      	cmp	r2, r3
 8004696:	d09f      	beq.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3740      	adds	r7, #64	; 0x40
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a8:	b0c0      	sub	sp, #256	; 0x100
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	68d9      	ldr	r1, [r3, #12]
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	ea40 0301 	orr.w	r3, r0, r1
 80046cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046fc:	f021 010c 	bic.w	r1, r1, #12
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800470a:	430b      	orrs	r3, r1
 800470c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	6999      	ldr	r1, [r3, #24]
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	ea40 0301 	orr.w	r3, r0, r1
 800472a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <UART_SetConfig+0x2cc>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d005      	beq.n	8004744 <UART_SetConfig+0xa0>
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <UART_SetConfig+0x2d0>)
 8004740:	429a      	cmp	r2, r3
 8004742:	d104      	bne.n	800474e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe faf8 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8004748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800474c:	e003      	b.n	8004756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800474e:	f7fe fadf 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8004752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	f040 810c 	bne.w	800497c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800476e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	1891      	adds	r1, r2, r2
 800477c:	65b9      	str	r1, [r7, #88]	; 0x58
 800477e:	415b      	adcs	r3, r3
 8004780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004786:	4621      	mov	r1, r4
 8004788:	eb12 0801 	adds.w	r8, r2, r1
 800478c:	4629      	mov	r1, r5
 800478e:	eb43 0901 	adc.w	r9, r3, r1
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	eb18 0303 	adds.w	r3, r8, r3
 80047b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047b4:	462b      	mov	r3, r5
 80047b6:	eb49 0303 	adc.w	r3, r9, r3
 80047ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047d2:	460b      	mov	r3, r1
 80047d4:	18db      	adds	r3, r3, r3
 80047d6:	653b      	str	r3, [r7, #80]	; 0x50
 80047d8:	4613      	mov	r3, r2
 80047da:	eb42 0303 	adc.w	r3, r2, r3
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
 80047e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047e8:	f7fb fd6a 	bl	80002c0 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4b61      	ldr	r3, [pc, #388]	; (8004978 <UART_SetConfig+0x2d4>)
 80047f2:	fba3 2302 	umull	r2, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	011c      	lsls	r4, r3, #4
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	1891      	adds	r1, r2, r2
 8004812:	64b9      	str	r1, [r7, #72]	; 0x48
 8004814:	415b      	adcs	r3, r3
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800481c:	4641      	mov	r1, r8
 800481e:	eb12 0a01 	adds.w	sl, r2, r1
 8004822:	4649      	mov	r1, r9
 8004824:	eb43 0b01 	adc.w	fp, r3, r1
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800483c:	4692      	mov	sl, r2
 800483e:	469b      	mov	fp, r3
 8004840:	4643      	mov	r3, r8
 8004842:	eb1a 0303 	adds.w	r3, sl, r3
 8004846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484a:	464b      	mov	r3, r9
 800484c:	eb4b 0303 	adc.w	r3, fp, r3
 8004850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004868:	460b      	mov	r3, r1
 800486a:	18db      	adds	r3, r3, r3
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
 800486e:	4613      	mov	r3, r2
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
 8004876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800487a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800487e:	f7fb fd1f 	bl	80002c0 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4611      	mov	r1, r2
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <UART_SetConfig+0x2d4>)
 800488a:	fba3 2301 	umull	r2, r3, r3, r1
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2264      	movs	r2, #100	; 0x64
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	1acb      	subs	r3, r1, r3
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <UART_SetConfig+0x2d4>)
 80048a0:	fba3 2302 	umull	r2, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048ac:	441c      	add	r4, r3
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c8:	415b      	adcs	r3, r3
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6339      	str	r1, [r7, #48]	; 0x30
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800491c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004924:	460b      	mov	r3, r1
 8004926:	18db      	adds	r3, r3, r3
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 800492a:	4613      	mov	r3, r2
 800492c:	eb42 0303 	adc.w	r3, r2, r3
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800493a:	f7fb fcc1 	bl	80002c0 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <UART_SetConfig+0x2d4>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	3332      	adds	r3, #50	; 0x32
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <UART_SetConfig+0x2d4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 0207 	and.w	r2, r3, #7
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4422      	add	r2, r4
 800496a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800496c:	e105      	b.n	8004b7a <UART_SetConfig+0x4d6>
 800496e:	bf00      	nop
 8004970:	40011000 	.word	0x40011000
 8004974:	40011400 	.word	0x40011400
 8004978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800498a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	1891      	adds	r1, r2, r2
 8004994:	6239      	str	r1, [r7, #32]
 8004996:	415b      	adcs	r3, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499e:	4641      	mov	r1, r8
 80049a0:	1854      	adds	r4, r2, r1
 80049a2:	4649      	mov	r1, r9
 80049a4:	eb43 0501 	adc.w	r5, r3, r1
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	00eb      	lsls	r3, r5, #3
 80049b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	4614      	mov	r4, r2
 80049ba:	461d      	mov	r5, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	18e3      	adds	r3, r4, r3
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049c4:	464b      	mov	r3, r9
 80049c6:	eb45 0303 	adc.w	r3, r5, r3
 80049ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ea:	4629      	mov	r1, r5
 80049ec:	008b      	lsls	r3, r1, #2
 80049ee:	4621      	mov	r1, r4
 80049f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f4:	4621      	mov	r1, r4
 80049f6:	008a      	lsls	r2, r1, #2
 80049f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049fc:	f7fb fc60 	bl	80002c0 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	61b9      	str	r1, [r7, #24]
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a30:	4641      	mov	r1, r8
 8004a32:	1851      	adds	r1, r2, r1
 8004a34:	6139      	str	r1, [r7, #16]
 8004a36:	4649      	mov	r1, r9
 8004a38:	414b      	adcs	r3, r1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a48:	4659      	mov	r1, fp
 8004a4a:	00cb      	lsls	r3, r1, #3
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a52:	4651      	mov	r1, sl
 8004a54:	00ca      	lsls	r2, r1, #3
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a88:	4649      	mov	r1, r9
 8004a8a:	008b      	lsls	r3, r1, #2
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a92:	4641      	mov	r1, r8
 8004a94:	008a      	lsls	r2, r1, #2
 8004a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a9a:	f7fb fc11 	bl	80002c0 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a34      	ldr	r2, [pc, #208]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac2:	441c      	add	r4, r3
 8004ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac8:	2200      	movs	r2, #0
 8004aca:	673b      	str	r3, [r7, #112]	; 0x70
 8004acc:	677a      	str	r2, [r7, #116]	; 0x74
 8004ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1851      	adds	r1, r2, r1
 8004ae6:	6039      	str	r1, [r7, #0]
 8004ae8:	4649      	mov	r1, r9
 8004aea:	414b      	adcs	r3, r1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004afa:	4659      	mov	r1, fp
 8004afc:	00cb      	lsls	r3, r1, #3
 8004afe:	4651      	mov	r1, sl
 8004b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b04:	4651      	mov	r1, sl
 8004b06:	00ca      	lsls	r2, r1, #3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4642      	mov	r2, r8
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	663b      	str	r3, [r7, #96]	; 0x60
 8004b28:	667a      	str	r2, [r7, #100]	; 0x64
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b36:	4649      	mov	r1, r9
 8004b38:	008b      	lsls	r3, r1, #2
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b40:	4641      	mov	r1, r8
 8004b42:	008a      	lsls	r2, r1, #2
 8004b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b48:	f7fb fbba 	bl	80002c0 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 020f 	and.w	r2, r3, #15
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4422      	add	r2, r4
 8004b78:	609a      	str	r2, [r3, #8]
}
 8004b7a:	bf00      	nop
 8004b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	51eb851f 	.word	0x51eb851f

08004b8c <__errno>:
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <__errno+0x8>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	2000004c 	.word	0x2000004c

08004b98 <__libc_init_array>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	4d0d      	ldr	r5, [pc, #52]	; (8004bd0 <__libc_init_array+0x38>)
 8004b9c:	4c0d      	ldr	r4, [pc, #52]	; (8004bd4 <__libc_init_array+0x3c>)
 8004b9e:	1b64      	subs	r4, r4, r5
 8004ba0:	10a4      	asrs	r4, r4, #2
 8004ba2:	2600      	movs	r6, #0
 8004ba4:	42a6      	cmp	r6, r4
 8004ba6:	d109      	bne.n	8004bbc <__libc_init_array+0x24>
 8004ba8:	4d0b      	ldr	r5, [pc, #44]	; (8004bd8 <__libc_init_array+0x40>)
 8004baa:	4c0c      	ldr	r4, [pc, #48]	; (8004bdc <__libc_init_array+0x44>)
 8004bac:	f000 fcc2 	bl	8005534 <_init>
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	42a6      	cmp	r6, r4
 8004bb8:	d105      	bne.n	8004bc6 <__libc_init_array+0x2e>
 8004bba:	bd70      	pop	{r4, r5, r6, pc}
 8004bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc0:	4798      	blx	r3
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7ee      	b.n	8004ba4 <__libc_init_array+0xc>
 8004bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bca:	4798      	blx	r3
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e7f2      	b.n	8004bb6 <__libc_init_array+0x1e>
 8004bd0:	08005680 	.word	0x08005680
 8004bd4:	08005680 	.word	0x08005680
 8004bd8:	08005680 	.word	0x08005680
 8004bdc:	08005684 	.word	0x08005684

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <siprintf>:
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	b500      	push	{lr}
 8004bf4:	b09c      	sub	sp, #112	; 0x70
 8004bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf8:	9002      	str	r0, [sp, #8]
 8004bfa:	9006      	str	r0, [sp, #24]
 8004bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c00:	4809      	ldr	r0, [pc, #36]	; (8004c28 <siprintf+0x38>)
 8004c02:	9107      	str	r1, [sp, #28]
 8004c04:	9104      	str	r1, [sp, #16]
 8004c06:	4909      	ldr	r1, [pc, #36]	; (8004c2c <siprintf+0x3c>)
 8004c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	a902      	add	r1, sp, #8
 8004c14:	f000 f974 	bl	8004f00 <_svfiprintf_r>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	b01c      	add	sp, #112	; 0x70
 8004c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	2000004c 	.word	0x2000004c
 8004c2c:	ffff0208 	.word	0xffff0208

08004c30 <time>:
 8004c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <time+0x30>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	4669      	mov	r1, sp
 8004c38:	4604      	mov	r4, r0
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	f000 f812 	bl	8004c64 <_gettimeofday_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	bfbe      	ittt	lt
 8004c44:	f04f 32ff 	movlt.w	r2, #4294967295
 8004c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c4c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c54:	b10c      	cbz	r4, 8004c5a <time+0x2a>
 8004c56:	e9c4 0100 	strd	r0, r1, [r4]
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000004c 	.word	0x2000004c

08004c64 <_gettimeofday_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d07      	ldr	r5, [pc, #28]	; (8004c84 <_gettimeofday_r+0x20>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	f000 fc57 	bl	8005524 <_gettimeofday>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d102      	bne.n	8004c80 <_gettimeofday_r+0x1c>
 8004c7a:	682b      	ldr	r3, [r5, #0]
 8004c7c:	b103      	cbz	r3, 8004c80 <_gettimeofday_r+0x1c>
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	bd38      	pop	{r3, r4, r5, pc}
 8004c82:	bf00      	nop
 8004c84:	2000020c 	.word	0x2000020c

08004c88 <_free_r>:
 8004c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	d044      	beq.n	8004d18 <_free_r+0x90>
 8004c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c92:	9001      	str	r0, [sp, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f1a1 0404 	sub.w	r4, r1, #4
 8004c9a:	bfb8      	it	lt
 8004c9c:	18e4      	addlt	r4, r4, r3
 8004c9e:	f000 fbfd 	bl	800549c <__malloc_lock>
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <_free_r+0x94>)
 8004ca4:	9801      	ldr	r0, [sp, #4]
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	b933      	cbnz	r3, 8004cb8 <_free_r+0x30>
 8004caa:	6063      	str	r3, [r4, #4]
 8004cac:	6014      	str	r4, [r2, #0]
 8004cae:	b003      	add	sp, #12
 8004cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb4:	f000 bbf8 	b.w	80054a8 <__malloc_unlock>
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	d908      	bls.n	8004cce <_free_r+0x46>
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1961      	adds	r1, r4, r5
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf01      	itttt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	1949      	addeq	r1, r1, r5
 8004cca:	6021      	streq	r1, [r4, #0]
 8004ccc:	e7ed      	b.n	8004caa <_free_r+0x22>
 8004cce:	461a      	mov	r2, r3
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b10b      	cbz	r3, 8004cd8 <_free_r+0x50>
 8004cd4:	42a3      	cmp	r3, r4
 8004cd6:	d9fa      	bls.n	8004cce <_free_r+0x46>
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	1855      	adds	r5, r2, r1
 8004cdc:	42a5      	cmp	r5, r4
 8004cde:	d10b      	bne.n	8004cf8 <_free_r+0x70>
 8004ce0:	6824      	ldr	r4, [r4, #0]
 8004ce2:	4421      	add	r1, r4
 8004ce4:	1854      	adds	r4, r2, r1
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	6011      	str	r1, [r2, #0]
 8004cea:	d1e0      	bne.n	8004cae <_free_r+0x26>
 8004cec:	681c      	ldr	r4, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	6053      	str	r3, [r2, #4]
 8004cf2:	4421      	add	r1, r4
 8004cf4:	6011      	str	r1, [r2, #0]
 8004cf6:	e7da      	b.n	8004cae <_free_r+0x26>
 8004cf8:	d902      	bls.n	8004d00 <_free_r+0x78>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	6003      	str	r3, [r0, #0]
 8004cfe:	e7d6      	b.n	8004cae <_free_r+0x26>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	1961      	adds	r1, r4, r5
 8004d04:	428b      	cmp	r3, r1
 8004d06:	bf04      	itt	eq
 8004d08:	6819      	ldreq	r1, [r3, #0]
 8004d0a:	685b      	ldreq	r3, [r3, #4]
 8004d0c:	6063      	str	r3, [r4, #4]
 8004d0e:	bf04      	itt	eq
 8004d10:	1949      	addeq	r1, r1, r5
 8004d12:	6021      	streq	r1, [r4, #0]
 8004d14:	6054      	str	r4, [r2, #4]
 8004d16:	e7ca      	b.n	8004cae <_free_r+0x26>
 8004d18:	b003      	add	sp, #12
 8004d1a:	bd30      	pop	{r4, r5, pc}
 8004d1c:	20000204 	.word	0x20000204

08004d20 <sbrk_aligned>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4e0e      	ldr	r6, [pc, #56]	; (8004d5c <sbrk_aligned+0x3c>)
 8004d24:	460c      	mov	r4, r1
 8004d26:	6831      	ldr	r1, [r6, #0]
 8004d28:	4605      	mov	r5, r0
 8004d2a:	b911      	cbnz	r1, 8004d32 <sbrk_aligned+0x12>
 8004d2c:	f000 fb7c 	bl	8005428 <_sbrk_r>
 8004d30:	6030      	str	r0, [r6, #0]
 8004d32:	4621      	mov	r1, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 fb77 	bl	8005428 <_sbrk_r>
 8004d3a:	1c43      	adds	r3, r0, #1
 8004d3c:	d00a      	beq.n	8004d54 <sbrk_aligned+0x34>
 8004d3e:	1cc4      	adds	r4, r0, #3
 8004d40:	f024 0403 	bic.w	r4, r4, #3
 8004d44:	42a0      	cmp	r0, r4
 8004d46:	d007      	beq.n	8004d58 <sbrk_aligned+0x38>
 8004d48:	1a21      	subs	r1, r4, r0
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 fb6c 	bl	8005428 <_sbrk_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d101      	bne.n	8004d58 <sbrk_aligned+0x38>
 8004d54:	f04f 34ff 	mov.w	r4, #4294967295
 8004d58:	4620      	mov	r0, r4
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	20000208 	.word	0x20000208

08004d60 <_malloc_r>:
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	1ccd      	adds	r5, r1, #3
 8004d66:	f025 0503 	bic.w	r5, r5, #3
 8004d6a:	3508      	adds	r5, #8
 8004d6c:	2d0c      	cmp	r5, #12
 8004d6e:	bf38      	it	cc
 8004d70:	250c      	movcc	r5, #12
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	4607      	mov	r7, r0
 8004d76:	db01      	blt.n	8004d7c <_malloc_r+0x1c>
 8004d78:	42a9      	cmp	r1, r5
 8004d7a:	d905      	bls.n	8004d88 <_malloc_r+0x28>
 8004d7c:	230c      	movs	r3, #12
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	2600      	movs	r6, #0
 8004d82:	4630      	mov	r0, r6
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d88:	4e2e      	ldr	r6, [pc, #184]	; (8004e44 <_malloc_r+0xe4>)
 8004d8a:	f000 fb87 	bl	800549c <__malloc_lock>
 8004d8e:	6833      	ldr	r3, [r6, #0]
 8004d90:	461c      	mov	r4, r3
 8004d92:	bb34      	cbnz	r4, 8004de2 <_malloc_r+0x82>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	f7ff ffc2 	bl	8004d20 <sbrk_aligned>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	4604      	mov	r4, r0
 8004da0:	d14d      	bne.n	8004e3e <_malloc_r+0xde>
 8004da2:	6834      	ldr	r4, [r6, #0]
 8004da4:	4626      	mov	r6, r4
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d140      	bne.n	8004e2c <_malloc_r+0xcc>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	4631      	mov	r1, r6
 8004dae:	4638      	mov	r0, r7
 8004db0:	eb04 0803 	add.w	r8, r4, r3
 8004db4:	f000 fb38 	bl	8005428 <_sbrk_r>
 8004db8:	4580      	cmp	r8, r0
 8004dba:	d13a      	bne.n	8004e32 <_malloc_r+0xd2>
 8004dbc:	6821      	ldr	r1, [r4, #0]
 8004dbe:	3503      	adds	r5, #3
 8004dc0:	1a6d      	subs	r5, r5, r1
 8004dc2:	f025 0503 	bic.w	r5, r5, #3
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	2d0c      	cmp	r5, #12
 8004dca:	bf38      	it	cc
 8004dcc:	250c      	movcc	r5, #12
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	f7ff ffa5 	bl	8004d20 <sbrk_aligned>
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d02b      	beq.n	8004e32 <_malloc_r+0xd2>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	442b      	add	r3, r5
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	e00e      	b.n	8004e00 <_malloc_r+0xa0>
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	1b52      	subs	r2, r2, r5
 8004de6:	d41e      	bmi.n	8004e26 <_malloc_r+0xc6>
 8004de8:	2a0b      	cmp	r2, #11
 8004dea:	d916      	bls.n	8004e1a <_malloc_r+0xba>
 8004dec:	1961      	adds	r1, r4, r5
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	6025      	str	r5, [r4, #0]
 8004df2:	bf18      	it	ne
 8004df4:	6059      	strne	r1, [r3, #4]
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	bf08      	it	eq
 8004dfa:	6031      	streq	r1, [r6, #0]
 8004dfc:	5162      	str	r2, [r4, r5]
 8004dfe:	604b      	str	r3, [r1, #4]
 8004e00:	4638      	mov	r0, r7
 8004e02:	f104 060b 	add.w	r6, r4, #11
 8004e06:	f000 fb4f 	bl	80054a8 <__malloc_unlock>
 8004e0a:	f026 0607 	bic.w	r6, r6, #7
 8004e0e:	1d23      	adds	r3, r4, #4
 8004e10:	1af2      	subs	r2, r6, r3
 8004e12:	d0b6      	beq.n	8004d82 <_malloc_r+0x22>
 8004e14:	1b9b      	subs	r3, r3, r6
 8004e16:	50a3      	str	r3, [r4, r2]
 8004e18:	e7b3      	b.n	8004d82 <_malloc_r+0x22>
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	bf0c      	ite	eq
 8004e20:	6032      	streq	r2, [r6, #0]
 8004e22:	605a      	strne	r2, [r3, #4]
 8004e24:	e7ec      	b.n	8004e00 <_malloc_r+0xa0>
 8004e26:	4623      	mov	r3, r4
 8004e28:	6864      	ldr	r4, [r4, #4]
 8004e2a:	e7b2      	b.n	8004d92 <_malloc_r+0x32>
 8004e2c:	4634      	mov	r4, r6
 8004e2e:	6876      	ldr	r6, [r6, #4]
 8004e30:	e7b9      	b.n	8004da6 <_malloc_r+0x46>
 8004e32:	230c      	movs	r3, #12
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4638      	mov	r0, r7
 8004e38:	f000 fb36 	bl	80054a8 <__malloc_unlock>
 8004e3c:	e7a1      	b.n	8004d82 <_malloc_r+0x22>
 8004e3e:	6025      	str	r5, [r4, #0]
 8004e40:	e7de      	b.n	8004e00 <_malloc_r+0xa0>
 8004e42:	bf00      	nop
 8004e44:	20000204 	.word	0x20000204

08004e48 <__ssputs_r>:
 8004e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	688e      	ldr	r6, [r1, #8]
 8004e4e:	429e      	cmp	r6, r3
 8004e50:	4682      	mov	sl, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	4690      	mov	r8, r2
 8004e56:	461f      	mov	r7, r3
 8004e58:	d838      	bhi.n	8004ecc <__ssputs_r+0x84>
 8004e5a:	898a      	ldrh	r2, [r1, #12]
 8004e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e60:	d032      	beq.n	8004ec8 <__ssputs_r+0x80>
 8004e62:	6825      	ldr	r5, [r4, #0]
 8004e64:	6909      	ldr	r1, [r1, #16]
 8004e66:	eba5 0901 	sub.w	r9, r5, r1
 8004e6a:	6965      	ldr	r5, [r4, #20]
 8004e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e74:	3301      	adds	r3, #1
 8004e76:	444b      	add	r3, r9
 8004e78:	106d      	asrs	r5, r5, #1
 8004e7a:	429d      	cmp	r5, r3
 8004e7c:	bf38      	it	cc
 8004e7e:	461d      	movcc	r5, r3
 8004e80:	0553      	lsls	r3, r2, #21
 8004e82:	d531      	bpl.n	8004ee8 <__ssputs_r+0xa0>
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7ff ff6b 	bl	8004d60 <_malloc_r>
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	b950      	cbnz	r0, 8004ea4 <__ssputs_r+0x5c>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	f8ca 3000 	str.w	r3, [sl]
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea4:	6921      	ldr	r1, [r4, #16]
 8004ea6:	464a      	mov	r2, r9
 8004ea8:	f000 fad0 	bl	800544c <memcpy>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	6126      	str	r6, [r4, #16]
 8004eba:	6165      	str	r5, [r4, #20]
 8004ebc:	444e      	add	r6, r9
 8004ebe:	eba5 0509 	sub.w	r5, r5, r9
 8004ec2:	6026      	str	r6, [r4, #0]
 8004ec4:	60a5      	str	r5, [r4, #8]
 8004ec6:	463e      	mov	r6, r7
 8004ec8:	42be      	cmp	r6, r7
 8004eca:	d900      	bls.n	8004ece <__ssputs_r+0x86>
 8004ecc:	463e      	mov	r6, r7
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	f000 fac8 	bl	8005468 <memmove>
 8004ed8:	68a3      	ldr	r3, [r4, #8]
 8004eda:	1b9b      	subs	r3, r3, r6
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	4433      	add	r3, r6
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e7db      	b.n	8004ea0 <__ssputs_r+0x58>
 8004ee8:	462a      	mov	r2, r5
 8004eea:	f000 fae3 	bl	80054b4 <_realloc_r>
 8004eee:	4606      	mov	r6, r0
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d1e1      	bne.n	8004eb8 <__ssputs_r+0x70>
 8004ef4:	6921      	ldr	r1, [r4, #16]
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	f7ff fec6 	bl	8004c88 <_free_r>
 8004efc:	e7c7      	b.n	8004e8e <__ssputs_r+0x46>
	...

08004f00 <_svfiprintf_r>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	4698      	mov	r8, r3
 8004f06:	898b      	ldrh	r3, [r1, #12]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	b09d      	sub	sp, #116	; 0x74
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	d50e      	bpl.n	8004f32 <_svfiprintf_r+0x32>
 8004f14:	690b      	ldr	r3, [r1, #16]
 8004f16:	b963      	cbnz	r3, 8004f32 <_svfiprintf_r+0x32>
 8004f18:	2140      	movs	r1, #64	; 0x40
 8004f1a:	f7ff ff21 	bl	8004d60 <_malloc_r>
 8004f1e:	6028      	str	r0, [r5, #0]
 8004f20:	6128      	str	r0, [r5, #16]
 8004f22:	b920      	cbnz	r0, 8004f2e <_svfiprintf_r+0x2e>
 8004f24:	230c      	movs	r3, #12
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e0d1      	b.n	80050d2 <_svfiprintf_r+0x1d2>
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	616b      	str	r3, [r5, #20]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
 8004f36:	2320      	movs	r3, #32
 8004f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f40:	2330      	movs	r3, #48	; 0x30
 8004f42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050ec <_svfiprintf_r+0x1ec>
 8004f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f4a:	f04f 0901 	mov.w	r9, #1
 8004f4e:	4623      	mov	r3, r4
 8004f50:	469a      	mov	sl, r3
 8004f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f56:	b10a      	cbz	r2, 8004f5c <_svfiprintf_r+0x5c>
 8004f58:	2a25      	cmp	r2, #37	; 0x25
 8004f5a:	d1f9      	bne.n	8004f50 <_svfiprintf_r+0x50>
 8004f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f60:	d00b      	beq.n	8004f7a <_svfiprintf_r+0x7a>
 8004f62:	465b      	mov	r3, fp
 8004f64:	4622      	mov	r2, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f7ff ff6d 	bl	8004e48 <__ssputs_r>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	f000 80aa 	beq.w	80050c8 <_svfiprintf_r+0x1c8>
 8004f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f76:	445a      	add	r2, fp
 8004f78:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80a2 	beq.w	80050c8 <_svfiprintf_r+0x1c8>
 8004f84:	2300      	movs	r3, #0
 8004f86:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f8e:	f10a 0a01 	add.w	sl, sl, #1
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	9307      	str	r3, [sp, #28]
 8004f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f9c:	4654      	mov	r4, sl
 8004f9e:	2205      	movs	r2, #5
 8004fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa4:	4851      	ldr	r0, [pc, #324]	; (80050ec <_svfiprintf_r+0x1ec>)
 8004fa6:	f7fb f93b 	bl	8000220 <memchr>
 8004faa:	9a04      	ldr	r2, [sp, #16]
 8004fac:	b9d8      	cbnz	r0, 8004fe6 <_svfiprintf_r+0xe6>
 8004fae:	06d0      	lsls	r0, r2, #27
 8004fb0:	bf44      	itt	mi
 8004fb2:	2320      	movmi	r3, #32
 8004fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb8:	0711      	lsls	r1, r2, #28
 8004fba:	bf44      	itt	mi
 8004fbc:	232b      	movmi	r3, #43	; 0x2b
 8004fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc8:	d015      	beq.n	8004ff6 <_svfiprintf_r+0xf6>
 8004fca:	9a07      	ldr	r2, [sp, #28]
 8004fcc:	4654      	mov	r4, sl
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f04f 0c0a 	mov.w	ip, #10
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fda:	3b30      	subs	r3, #48	; 0x30
 8004fdc:	2b09      	cmp	r3, #9
 8004fde:	d94e      	bls.n	800507e <_svfiprintf_r+0x17e>
 8004fe0:	b1b0      	cbz	r0, 8005010 <_svfiprintf_r+0x110>
 8004fe2:	9207      	str	r2, [sp, #28]
 8004fe4:	e014      	b.n	8005010 <_svfiprintf_r+0x110>
 8004fe6:	eba0 0308 	sub.w	r3, r0, r8
 8004fea:	fa09 f303 	lsl.w	r3, r9, r3
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	46a2      	mov	sl, r4
 8004ff4:	e7d2      	b.n	8004f9c <_svfiprintf_r+0x9c>
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	1d19      	adds	r1, r3, #4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	9103      	str	r1, [sp, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bfbb      	ittet	lt
 8005002:	425b      	neglt	r3, r3
 8005004:	f042 0202 	orrlt.w	r2, r2, #2
 8005008:	9307      	strge	r3, [sp, #28]
 800500a:	9307      	strlt	r3, [sp, #28]
 800500c:	bfb8      	it	lt
 800500e:	9204      	strlt	r2, [sp, #16]
 8005010:	7823      	ldrb	r3, [r4, #0]
 8005012:	2b2e      	cmp	r3, #46	; 0x2e
 8005014:	d10c      	bne.n	8005030 <_svfiprintf_r+0x130>
 8005016:	7863      	ldrb	r3, [r4, #1]
 8005018:	2b2a      	cmp	r3, #42	; 0x2a
 800501a:	d135      	bne.n	8005088 <_svfiprintf_r+0x188>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	9203      	str	r2, [sp, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	bfb8      	it	lt
 8005028:	f04f 33ff 	movlt.w	r3, #4294967295
 800502c:	3402      	adds	r4, #2
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050fc <_svfiprintf_r+0x1fc>
 8005034:	7821      	ldrb	r1, [r4, #0]
 8005036:	2203      	movs	r2, #3
 8005038:	4650      	mov	r0, sl
 800503a:	f7fb f8f1 	bl	8000220 <memchr>
 800503e:	b140      	cbz	r0, 8005052 <_svfiprintf_r+0x152>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	eba0 000a 	sub.w	r0, r0, sl
 8005046:	fa03 f000 	lsl.w	r0, r3, r0
 800504a:	9b04      	ldr	r3, [sp, #16]
 800504c:	4303      	orrs	r3, r0
 800504e:	3401      	adds	r4, #1
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005056:	4826      	ldr	r0, [pc, #152]	; (80050f0 <_svfiprintf_r+0x1f0>)
 8005058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800505c:	2206      	movs	r2, #6
 800505e:	f7fb f8df 	bl	8000220 <memchr>
 8005062:	2800      	cmp	r0, #0
 8005064:	d038      	beq.n	80050d8 <_svfiprintf_r+0x1d8>
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <_svfiprintf_r+0x1f4>)
 8005068:	bb1b      	cbnz	r3, 80050b2 <_svfiprintf_r+0x1b2>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	3308      	adds	r3, #8
 8005074:	9303      	str	r3, [sp, #12]
 8005076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005078:	4433      	add	r3, r6
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	e767      	b.n	8004f4e <_svfiprintf_r+0x4e>
 800507e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005082:	460c      	mov	r4, r1
 8005084:	2001      	movs	r0, #1
 8005086:	e7a5      	b.n	8004fd4 <_svfiprintf_r+0xd4>
 8005088:	2300      	movs	r3, #0
 800508a:	3401      	adds	r4, #1
 800508c:	9305      	str	r3, [sp, #20]
 800508e:	4619      	mov	r1, r3
 8005090:	f04f 0c0a 	mov.w	ip, #10
 8005094:	4620      	mov	r0, r4
 8005096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509a:	3a30      	subs	r2, #48	; 0x30
 800509c:	2a09      	cmp	r2, #9
 800509e:	d903      	bls.n	80050a8 <_svfiprintf_r+0x1a8>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0c5      	beq.n	8005030 <_svfiprintf_r+0x130>
 80050a4:	9105      	str	r1, [sp, #20]
 80050a6:	e7c3      	b.n	8005030 <_svfiprintf_r+0x130>
 80050a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ac:	4604      	mov	r4, r0
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7f0      	b.n	8005094 <_svfiprintf_r+0x194>
 80050b2:	ab03      	add	r3, sp, #12
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	462a      	mov	r2, r5
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <_svfiprintf_r+0x1f8>)
 80050ba:	a904      	add	r1, sp, #16
 80050bc:	4638      	mov	r0, r7
 80050be:	f3af 8000 	nop.w
 80050c2:	1c42      	adds	r2, r0, #1
 80050c4:	4606      	mov	r6, r0
 80050c6:	d1d6      	bne.n	8005076 <_svfiprintf_r+0x176>
 80050c8:	89ab      	ldrh	r3, [r5, #12]
 80050ca:	065b      	lsls	r3, r3, #25
 80050cc:	f53f af2c 	bmi.w	8004f28 <_svfiprintf_r+0x28>
 80050d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d2:	b01d      	add	sp, #116	; 0x74
 80050d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <_svfiprintf_r+0x1f8>)
 80050e0:	a904      	add	r1, sp, #16
 80050e2:	4638      	mov	r0, r7
 80050e4:	f000 f87a 	bl	80051dc <_printf_i>
 80050e8:	e7eb      	b.n	80050c2 <_svfiprintf_r+0x1c2>
 80050ea:	bf00      	nop
 80050ec:	080055e4 	.word	0x080055e4
 80050f0:	080055ee 	.word	0x080055ee
 80050f4:	00000000 	.word	0x00000000
 80050f8:	08004e49 	.word	0x08004e49
 80050fc:	080055ea 	.word	0x080055ea

08005100 <_printf_common>:
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	4616      	mov	r6, r2
 8005106:	4699      	mov	r9, r3
 8005108:	688a      	ldr	r2, [r1, #8]
 800510a:	690b      	ldr	r3, [r1, #16]
 800510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005110:	4293      	cmp	r3, r2
 8005112:	bfb8      	it	lt
 8005114:	4613      	movlt	r3, r2
 8005116:	6033      	str	r3, [r6, #0]
 8005118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511c:	4607      	mov	r7, r0
 800511e:	460c      	mov	r4, r1
 8005120:	b10a      	cbz	r2, 8005126 <_printf_common+0x26>
 8005122:	3301      	adds	r3, #1
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	6833      	ldrmi	r3, [r6, #0]
 800512e:	3302      	addmi	r3, #2
 8005130:	6033      	strmi	r3, [r6, #0]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	f015 0506 	ands.w	r5, r5, #6
 8005138:	d106      	bne.n	8005148 <_printf_common+0x48>
 800513a:	f104 0a19 	add.w	sl, r4, #25
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	6832      	ldr	r2, [r6, #0]
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc26      	bgt.n	8005196 <_printf_common+0x96>
 8005148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800514c:	1e13      	subs	r3, r2, #0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	bf18      	it	ne
 8005152:	2301      	movne	r3, #1
 8005154:	0692      	lsls	r2, r2, #26
 8005156:	d42b      	bmi.n	80051b0 <_printf_common+0xb0>
 8005158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d01e      	beq.n	80051a4 <_printf_common+0xa4>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	68e5      	ldr	r5, [r4, #12]
 800516a:	6832      	ldr	r2, [r6, #0]
 800516c:	f003 0306 	and.w	r3, r3, #6
 8005170:	2b04      	cmp	r3, #4
 8005172:	bf08      	it	eq
 8005174:	1aad      	subeq	r5, r5, r2
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	6922      	ldr	r2, [r4, #16]
 800517a:	bf0c      	ite	eq
 800517c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005180:	2500      	movne	r5, #0
 8005182:	4293      	cmp	r3, r2
 8005184:	bfc4      	itt	gt
 8005186:	1a9b      	subgt	r3, r3, r2
 8005188:	18ed      	addgt	r5, r5, r3
 800518a:	2600      	movs	r6, #0
 800518c:	341a      	adds	r4, #26
 800518e:	42b5      	cmp	r5, r6
 8005190:	d11a      	bne.n	80051c8 <_printf_common+0xc8>
 8005192:	2000      	movs	r0, #0
 8005194:	e008      	b.n	80051a8 <_printf_common+0xa8>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4649      	mov	r1, r9
 800519c:	4638      	mov	r0, r7
 800519e:	47c0      	blx	r8
 80051a0:	3001      	adds	r0, #1
 80051a2:	d103      	bne.n	80051ac <_printf_common+0xac>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	3501      	adds	r5, #1
 80051ae:	e7c6      	b.n	800513e <_printf_common+0x3e>
 80051b0:	18e1      	adds	r1, r4, r3
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ba:	4422      	add	r2, r4
 80051bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c4:	3302      	adds	r3, #2
 80051c6:	e7c7      	b.n	8005158 <_printf_common+0x58>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4622      	mov	r2, r4
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d0e6      	beq.n	80051a4 <_printf_common+0xa4>
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7d9      	b.n	800518e <_printf_common+0x8e>
	...

080051dc <_printf_i>:
 80051dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	7e0f      	ldrb	r7, [r1, #24]
 80051e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051e4:	2f78      	cmp	r7, #120	; 0x78
 80051e6:	4691      	mov	r9, r2
 80051e8:	4680      	mov	r8, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	469a      	mov	sl, r3
 80051ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051f2:	d807      	bhi.n	8005204 <_printf_i+0x28>
 80051f4:	2f62      	cmp	r7, #98	; 0x62
 80051f6:	d80a      	bhi.n	800520e <_printf_i+0x32>
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	f000 80d8 	beq.w	80053ae <_printf_i+0x1d2>
 80051fe:	2f58      	cmp	r7, #88	; 0x58
 8005200:	f000 80a3 	beq.w	800534a <_printf_i+0x16e>
 8005204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800520c:	e03a      	b.n	8005284 <_printf_i+0xa8>
 800520e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005212:	2b15      	cmp	r3, #21
 8005214:	d8f6      	bhi.n	8005204 <_printf_i+0x28>
 8005216:	a101      	add	r1, pc, #4	; (adr r1, 800521c <_printf_i+0x40>)
 8005218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800521c:	08005275 	.word	0x08005275
 8005220:	08005289 	.word	0x08005289
 8005224:	08005205 	.word	0x08005205
 8005228:	08005205 	.word	0x08005205
 800522c:	08005205 	.word	0x08005205
 8005230:	08005205 	.word	0x08005205
 8005234:	08005289 	.word	0x08005289
 8005238:	08005205 	.word	0x08005205
 800523c:	08005205 	.word	0x08005205
 8005240:	08005205 	.word	0x08005205
 8005244:	08005205 	.word	0x08005205
 8005248:	08005395 	.word	0x08005395
 800524c:	080052b9 	.word	0x080052b9
 8005250:	08005377 	.word	0x08005377
 8005254:	08005205 	.word	0x08005205
 8005258:	08005205 	.word	0x08005205
 800525c:	080053b7 	.word	0x080053b7
 8005260:	08005205 	.word	0x08005205
 8005264:	080052b9 	.word	0x080052b9
 8005268:	08005205 	.word	0x08005205
 800526c:	08005205 	.word	0x08005205
 8005270:	0800537f 	.word	0x0800537f
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	1d1a      	adds	r2, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	602a      	str	r2, [r5, #0]
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005284:	2301      	movs	r3, #1
 8005286:	e0a3      	b.n	80053d0 <_printf_i+0x1f4>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	6829      	ldr	r1, [r5, #0]
 800528c:	0606      	lsls	r6, r0, #24
 800528e:	f101 0304 	add.w	r3, r1, #4
 8005292:	d50a      	bpl.n	80052aa <_printf_i+0xce>
 8005294:	680e      	ldr	r6, [r1, #0]
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	2e00      	cmp	r6, #0
 800529a:	da03      	bge.n	80052a4 <_printf_i+0xc8>
 800529c:	232d      	movs	r3, #45	; 0x2d
 800529e:	4276      	negs	r6, r6
 80052a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a4:	485e      	ldr	r0, [pc, #376]	; (8005420 <_printf_i+0x244>)
 80052a6:	230a      	movs	r3, #10
 80052a8:	e019      	b.n	80052de <_printf_i+0x102>
 80052aa:	680e      	ldr	r6, [r1, #0]
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052b2:	bf18      	it	ne
 80052b4:	b236      	sxthne	r6, r6
 80052b6:	e7ef      	b.n	8005298 <_printf_i+0xbc>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	6820      	ldr	r0, [r4, #0]
 80052bc:	1d19      	adds	r1, r3, #4
 80052be:	6029      	str	r1, [r5, #0]
 80052c0:	0601      	lsls	r1, r0, #24
 80052c2:	d501      	bpl.n	80052c8 <_printf_i+0xec>
 80052c4:	681e      	ldr	r6, [r3, #0]
 80052c6:	e002      	b.n	80052ce <_printf_i+0xf2>
 80052c8:	0646      	lsls	r6, r0, #25
 80052ca:	d5fb      	bpl.n	80052c4 <_printf_i+0xe8>
 80052cc:	881e      	ldrh	r6, [r3, #0]
 80052ce:	4854      	ldr	r0, [pc, #336]	; (8005420 <_printf_i+0x244>)
 80052d0:	2f6f      	cmp	r7, #111	; 0x6f
 80052d2:	bf0c      	ite	eq
 80052d4:	2308      	moveq	r3, #8
 80052d6:	230a      	movne	r3, #10
 80052d8:	2100      	movs	r1, #0
 80052da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052de:	6865      	ldr	r5, [r4, #4]
 80052e0:	60a5      	str	r5, [r4, #8]
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	bfa2      	ittt	ge
 80052e6:	6821      	ldrge	r1, [r4, #0]
 80052e8:	f021 0104 	bicge.w	r1, r1, #4
 80052ec:	6021      	strge	r1, [r4, #0]
 80052ee:	b90e      	cbnz	r6, 80052f4 <_printf_i+0x118>
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	d04d      	beq.n	8005390 <_printf_i+0x1b4>
 80052f4:	4615      	mov	r5, r2
 80052f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80052fa:	fb03 6711 	mls	r7, r3, r1, r6
 80052fe:	5dc7      	ldrb	r7, [r0, r7]
 8005300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005304:	4637      	mov	r7, r6
 8005306:	42bb      	cmp	r3, r7
 8005308:	460e      	mov	r6, r1
 800530a:	d9f4      	bls.n	80052f6 <_printf_i+0x11a>
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <_printf_i+0x14c>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07de      	lsls	r6, r3, #31
 8005314:	d508      	bpl.n	8005328 <_printf_i+0x14c>
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	4299      	cmp	r1, r3
 800531c:	bfde      	ittt	le
 800531e:	2330      	movle	r3, #48	; 0x30
 8005320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005328:	1b52      	subs	r2, r2, r5
 800532a:	6122      	str	r2, [r4, #16]
 800532c:	f8cd a000 	str.w	sl, [sp]
 8005330:	464b      	mov	r3, r9
 8005332:	aa03      	add	r2, sp, #12
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fee2 	bl	8005100 <_printf_common>
 800533c:	3001      	adds	r0, #1
 800533e:	d14c      	bne.n	80053da <_printf_i+0x1fe>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	b004      	add	sp, #16
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	4835      	ldr	r0, [pc, #212]	; (8005420 <_printf_i+0x244>)
 800534c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005350:	6829      	ldr	r1, [r5, #0]
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	f851 6b04 	ldr.w	r6, [r1], #4
 8005358:	6029      	str	r1, [r5, #0]
 800535a:	061d      	lsls	r5, r3, #24
 800535c:	d514      	bpl.n	8005388 <_printf_i+0x1ac>
 800535e:	07df      	lsls	r7, r3, #31
 8005360:	bf44      	itt	mi
 8005362:	f043 0320 	orrmi.w	r3, r3, #32
 8005366:	6023      	strmi	r3, [r4, #0]
 8005368:	b91e      	cbnz	r6, 8005372 <_printf_i+0x196>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f023 0320 	bic.w	r3, r3, #32
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	2310      	movs	r3, #16
 8005374:	e7b0      	b.n	80052d8 <_printf_i+0xfc>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	2378      	movs	r3, #120	; 0x78
 8005380:	4828      	ldr	r0, [pc, #160]	; (8005424 <_printf_i+0x248>)
 8005382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005386:	e7e3      	b.n	8005350 <_printf_i+0x174>
 8005388:	0659      	lsls	r1, r3, #25
 800538a:	bf48      	it	mi
 800538c:	b2b6      	uxthmi	r6, r6
 800538e:	e7e6      	b.n	800535e <_printf_i+0x182>
 8005390:	4615      	mov	r5, r2
 8005392:	e7bb      	b.n	800530c <_printf_i+0x130>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	6826      	ldr	r6, [r4, #0]
 8005398:	6961      	ldr	r1, [r4, #20]
 800539a:	1d18      	adds	r0, r3, #4
 800539c:	6028      	str	r0, [r5, #0]
 800539e:	0635      	lsls	r5, r6, #24
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0x1cc>
 80053a4:	6019      	str	r1, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0x1d2>
 80053a8:	0670      	lsls	r0, r6, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0x1c8>
 80053ac:	8019      	strh	r1, [r3, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	4615      	mov	r5, r2
 80053b4:	e7ba      	b.n	800532c <_printf_i+0x150>
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	1d1a      	adds	r2, r3, #4
 80053ba:	602a      	str	r2, [r5, #0]
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	2100      	movs	r1, #0
 80053c2:	4628      	mov	r0, r5
 80053c4:	f7fa ff2c 	bl	8000220 <memchr>
 80053c8:	b108      	cbz	r0, 80053ce <_printf_i+0x1f2>
 80053ca:	1b40      	subs	r0, r0, r5
 80053cc:	6060      	str	r0, [r4, #4]
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	2300      	movs	r3, #0
 80053d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d8:	e7a8      	b.n	800532c <_printf_i+0x150>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	462a      	mov	r2, r5
 80053de:	4649      	mov	r1, r9
 80053e0:	4640      	mov	r0, r8
 80053e2:	47d0      	blx	sl
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0ab      	beq.n	8005340 <_printf_i+0x164>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	079b      	lsls	r3, r3, #30
 80053ec:	d413      	bmi.n	8005416 <_printf_i+0x23a>
 80053ee:	68e0      	ldr	r0, [r4, #12]
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	4298      	cmp	r0, r3
 80053f4:	bfb8      	it	lt
 80053f6:	4618      	movlt	r0, r3
 80053f8:	e7a4      	b.n	8005344 <_printf_i+0x168>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4632      	mov	r2, r6
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d09b      	beq.n	8005340 <_printf_i+0x164>
 8005408:	3501      	adds	r5, #1
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	9903      	ldr	r1, [sp, #12]
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	42ab      	cmp	r3, r5
 8005412:	dcf2      	bgt.n	80053fa <_printf_i+0x21e>
 8005414:	e7eb      	b.n	80053ee <_printf_i+0x212>
 8005416:	2500      	movs	r5, #0
 8005418:	f104 0619 	add.w	r6, r4, #25
 800541c:	e7f5      	b.n	800540a <_printf_i+0x22e>
 800541e:	bf00      	nop
 8005420:	080055f5 	.word	0x080055f5
 8005424:	08005606 	.word	0x08005606

08005428 <_sbrk_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d06      	ldr	r5, [pc, #24]	; (8005444 <_sbrk_r+0x1c>)
 800542c:	2300      	movs	r3, #0
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fc fb7a 	bl	8001b2c <_sbrk>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_sbrk_r+0x1a>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_sbrk_r+0x1a>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	2000020c 	.word	0x2000020c

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005462:	4291      	cmp	r1, r2
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <memmove>:
 8005468:	4288      	cmp	r0, r1
 800546a:	b510      	push	{r4, lr}
 800546c:	eb01 0402 	add.w	r4, r1, r2
 8005470:	d902      	bls.n	8005478 <memmove+0x10>
 8005472:	4284      	cmp	r4, r0
 8005474:	4623      	mov	r3, r4
 8005476:	d807      	bhi.n	8005488 <memmove+0x20>
 8005478:	1e43      	subs	r3, r0, #1
 800547a:	42a1      	cmp	r1, r4
 800547c:	d008      	beq.n	8005490 <memmove+0x28>
 800547e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005482:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005486:	e7f8      	b.n	800547a <memmove+0x12>
 8005488:	4402      	add	r2, r0
 800548a:	4601      	mov	r1, r0
 800548c:	428a      	cmp	r2, r1
 800548e:	d100      	bne.n	8005492 <memmove+0x2a>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005496:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800549a:	e7f7      	b.n	800548c <memmove+0x24>

0800549c <__malloc_lock>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__malloc_lock+0x8>)
 800549e:	f7ff bfd3 	b.w	8005448 <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	20000210 	.word	0x20000210

080054a8 <__malloc_unlock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_unlock+0x8>)
 80054aa:	f7ff bfce 	b.w	800544a <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	20000210 	.word	0x20000210

080054b4 <_realloc_r>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	4680      	mov	r8, r0
 80054ba:	4614      	mov	r4, r2
 80054bc:	460e      	mov	r6, r1
 80054be:	b921      	cbnz	r1, 80054ca <_realloc_r+0x16>
 80054c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c4:	4611      	mov	r1, r2
 80054c6:	f7ff bc4b 	b.w	8004d60 <_malloc_r>
 80054ca:	b92a      	cbnz	r2, 80054d8 <_realloc_r+0x24>
 80054cc:	f7ff fbdc 	bl	8004c88 <_free_r>
 80054d0:	4625      	mov	r5, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d8:	f000 f81b 	bl	8005512 <_malloc_usable_size_r>
 80054dc:	4284      	cmp	r4, r0
 80054de:	4607      	mov	r7, r0
 80054e0:	d802      	bhi.n	80054e8 <_realloc_r+0x34>
 80054e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054e6:	d812      	bhi.n	800550e <_realloc_r+0x5a>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4640      	mov	r0, r8
 80054ec:	f7ff fc38 	bl	8004d60 <_malloc_r>
 80054f0:	4605      	mov	r5, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d0ed      	beq.n	80054d2 <_realloc_r+0x1e>
 80054f6:	42bc      	cmp	r4, r7
 80054f8:	4622      	mov	r2, r4
 80054fa:	4631      	mov	r1, r6
 80054fc:	bf28      	it	cs
 80054fe:	463a      	movcs	r2, r7
 8005500:	f7ff ffa4 	bl	800544c <memcpy>
 8005504:	4631      	mov	r1, r6
 8005506:	4640      	mov	r0, r8
 8005508:	f7ff fbbe 	bl	8004c88 <_free_r>
 800550c:	e7e1      	b.n	80054d2 <_realloc_r+0x1e>
 800550e:	4635      	mov	r5, r6
 8005510:	e7df      	b.n	80054d2 <_realloc_r+0x1e>

08005512 <_malloc_usable_size_r>:
 8005512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005516:	1f18      	subs	r0, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfbc      	itt	lt
 800551c:	580b      	ldrlt	r3, [r1, r0]
 800551e:	18c0      	addlt	r0, r0, r3
 8005520:	4770      	bx	lr
	...

08005524 <_gettimeofday>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <_gettimeofday+0xc>)
 8005526:	2258      	movs	r2, #88	; 0x58
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	4770      	bx	lr
 8005530:	2000020c 	.word	0x2000020c

08005534 <_init>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr

08005540 <_fini>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr
